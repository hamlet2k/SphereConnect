{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SphereConnect Documentation","text":"<p>Welcome to the SphereConnect documentation! This comprehensive guide covers everything you need to know about deploying, using, and contributing to SphereConnect - an AI-driven coordination platform for Star Citizen guilds.</p>"},{"location":"#what-is-sphereconnect","title":"What is SphereConnect?","text":"<p>SphereConnect is a multitenant AI-assisted application designed for seamless guild coordination in Star Citizen. It features voice-driven workflows via Wingman-AI integration, web interfaces, and real-time notifications to enhance player organization in sandbox MMO environments.</p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":""},{"location":"#setup-guides","title":"\ud83d\ude80 Setup Guides","text":"<p>Get started with SphereConnect quickly:</p> <ul> <li>Installation: System requirements and installation steps</li> <li>Configuration: Environment setup and configuration options</li> <li>Deployment: Production deployment strategies</li> </ul>"},{"location":"#user-manual","title":"\ud83d\udcd6 User Manual","text":"<p>Learn how to use SphereConnect effectively:</p> <ul> <li>Getting Started: First-time user guide</li> <li>Voice Commands: Wingman-AI voice interaction guide</li> <li>Web Interface: Using the web dashboard</li> <li>Troubleshooting: Common issues and solutions</li> </ul>"},{"location":"#api-reference","title":"\ud83d\udd27 API Reference","text":"<p>Technical documentation for developers:</p> <ul> <li>Authentication: Complete auth system documentation</li> <li>Objectives API: Managing objectives programmatically</li> <li>Tasks API: Task management endpoints</li> <li>Wingman-AI Integration: Voice skill implementation</li> </ul>"},{"location":"#developer-guide","title":"\ud83d\udee0\ufe0f Developer Guide","text":"<p>Contribute to SphereConnect development:</p> <ul> <li>Architecture: System design and components</li> <li>Database Schema: Data model documentation</li> <li>Contribution Guidelines: How to contribute</li> <li>Testing: Testing strategies and tools</li> </ul>"},{"location":"#project-documents","title":"\ud83d\udccb Project Documents","text":"<p>Project planning and background:</p> <ul> <li>Project Proposal: Initial project vision</li> <li>Implementation Plan: Detailed development roadmap</li> <li>Changelog: Version history and updates</li> </ul>"},{"location":"#tools","title":"\ud83d\udd28 Tools","text":"<p>Utility documentation:</p> <ul> <li>Purge Script: Test data management tool</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>For Users: Start with Getting Started</li> <li>For Developers: Check Installation then Architecture</li> <li>For Contributors: Read Contribution Guidelines</li> </ol>"},{"location":"#support","title":"Support","text":"<ul> <li>Issues: Report bugs on GitHub</li> <li>Discussions: Join community discussions</li> <li>Documentation Issues: Submit PRs for improvements</li> </ul>"},{"location":"#license","title":"License","text":"<p>SphereConnect is licensed under Apache 2.0. See the main README for details.</p>"},{"location":"api-reference/authentication/","title":"SphereConnect Authentication System Documentation","text":""},{"location":"api-reference/authentication/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Authentication Flow</li> <li>API Endpoints</li> <li>Security Features</li> <li>Database Schema</li> <li>Implementation Details</li> <li>Testing</li> <li>Deployment</li> </ol>"},{"location":"api-reference/authentication/#overview","title":"Overview","text":"<p>The SphereConnect authentication system provides enterprise-grade security with seamless integration between web-based login and voice PIN verification. The system supports multi-factor authentication (MFA), session management, rate limiting, and comprehensive security monitoring.</p>"},{"location":"api-reference/authentication/#key-features","title":"Key Features","text":"<ul> <li>Dual Authentication: Web login + Voice PIN verification</li> <li>Multi-Factor Authentication: TOTP-based 2FA</li> <li>Session Management: JWT tokens with refresh mechanism</li> <li>Security Protections: Rate limiting, failed attempt tracking, account lockout</li> <li>Guild-Based Access: Multitenant architecture with data isolation</li> <li>Role-Based Permissions: Admin access for AI Commander management</li> </ul>"},{"location":"api-reference/authentication/#authentication-flow","title":"Authentication Flow","text":""},{"location":"api-reference/authentication/#1-user-registration-flow","title":"1. User Registration Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant A as API\n    participant D as Database\n\n    U-&gt;&gt;F: Submit registration form\n    F-&gt;&gt;A: POST /auth/register\n    A-&gt;&gt;A: Validate input data\n    A-&gt;&gt;D: Check existing user\n    D--&gt;&gt;A: User availability\n    A-&gt;&gt;A: Hash password &amp; PIN\n    A-&gt;&gt;D: Create user record\n    D--&gt;&gt;A: User created\n    A--&gt;&gt;F: Registration success\n    F--&gt;&gt;U: Success message\n</code></pre>"},{"location":"api-reference/authentication/#2-login-flow","title":"2. Login Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant A as API\n    participant D as Database\n\n    U-&gt;&gt;F: Enter credentials\n    F-&gt;&gt;A: POST /auth/login\n    A-&gt;&gt;A: Check rate limiting\n    A-&gt;&gt;D: Find user by name + guild\n    D--&gt;&gt;A: User data\n    A-&gt;&gt;A: Check account lockout\n    A-&gt;&gt;A: Verify password\n    A-&gt;&gt;A: Reset failed attempts\n    A-&gt;&gt;A: Create JWT token\n    A-&gt;&gt;D: Store session record\n    A--&gt;&gt;F: JWT token + user info\n    F--&gt;&gt;U: Login success\n</code></pre>"},{"location":"api-reference/authentication/#3-voice-pin-verification-flow","title":"3. Voice PIN Verification Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant W as Wingman-AI\n    participant A as API\n    participant D as Database\n\n    U-&gt;&gt;W: \"UEE Commander, authenticate with PIN 123456\"\n    W-&gt;&gt;W: Parse voice command\n    W-&gt;&gt;A: Extract PIN + user context\n    A-&gt;&gt;D: Verify PIN hash\n    D--&gt;&gt;A: PIN validation result\n    A--&gt;&gt;W: Success/Failure response\n    W--&gt;&gt;U: Voice confirmation\n</code></pre>"},{"location":"api-reference/authentication/#4-mfa-setup-verification-flow","title":"4. MFA Setup &amp; Verification Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant A as API\n    participant D as Database\n\n    U-&gt;&gt;F: Request MFA setup\n    F-&gt;&gt;A: POST /auth/mfa/setup (JWT required)\n    A-&gt;&gt;A: Generate TOTP secret\n    A-&gt;&gt;D: Store secret in user record\n    A--&gt;&gt;F: QR code provisioning URI\n    F--&gt;&gt;U: Display QR code\n    U-&gt;&gt;U: Scan with authenticator app\n    U-&gt;&gt;F: Enter TOTP code\n    F-&gt;&gt;A: POST /auth/mfa/verify\n    A-&gt;&gt;A: Validate TOTP code\n    A--&gt;&gt;F: MFA verification result\n</code></pre>"},{"location":"api-reference/authentication/#api-endpoints","title":"API Endpoints","text":""},{"location":"api-reference/authentication/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"api-reference/authentication/#post-authregister","title":"<code>POST /auth/register</code>","text":"<p>Register a new user account.</p> <p>Request Body: <pre><code>{\n  \"name\": \"johndoe\",\n  \"password\": \"securepassword123\",\n  \"pin\": \"123456\",\n  \"guild_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"phonetic\": \"john doe\"\n}\n</code></pre></p> <p>Response (201): <pre><code>{\n  \"message\": \"User registered successfully\",\n  \"user_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n  \"tts_response\": \"User john doe registered successfully\"\n}\n</code></pre></p> <p>Rate Limit: 3 requests per minute</p>"},{"location":"api-reference/authentication/#post-authlogin","title":"<code>POST /auth/login</code>","text":"<p>Authenticate user and return JWT token.</p> <p>Request Body: <pre><code>{\n  \"name\": \"johndoe\",\n  \"password\": \"securepassword123\",\n  \"guild_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 1800,\n  \"user\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440001\",\n    \"name\": \"johndoe\",\n    \"guild_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"rank\": \"550e8400-e29b-41d4-a716-446655440002\"\n  },\n  \"requires_mfa\": false\n}\n</code></pre></p> <p>Rate Limit: 5 requests per minute</p>"},{"location":"api-reference/authentication/#post-authverify-pin","title":"<code>POST /auth/verify-pin</code>","text":"<p>Verify user's PIN for voice authentication.</p> <p>Request Body: <pre><code>{\n  \"user_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n  \"pin\": \"123456\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"message\": \"PIN verified successfully\",\n  \"user_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n  \"tts_response\": \"Authentication confirmed\"\n}\n</code></pre></p>"},{"location":"api-reference/authentication/#post-authrefresh","title":"<code>POST /auth/refresh</code>","text":"<p>Refresh access token using existing token.</p> <p>Request Body: <pre><code>{\n  \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"\n}\n</code></pre></p> <p>Response (200): Same as login response</p>"},{"location":"api-reference/authentication/#post-authmfasetup","title":"<code>POST /auth/mfa/setup</code>","text":"<p>Setup TOTP MFA for user account.</p> <p>Headers: <pre><code>Authorization: Bearer &lt;jwt_token&gt;\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"user_id\": \"550e8400-e29b-41d4-a716-446655440001\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"secret\": \"JBSWY3DPEHPK3PXP\",\n  \"provisioning_uri\": \"otpauth://totp/SphereConnect:john@example.com?secret=JBSWY3DPEHPK3PXP&amp;issuer=SphereConnect\",\n  \"message\": \"MFA setup initiated. Scan QR code with authenticator app.\"\n}\n</code></pre></p>"},{"location":"api-reference/authentication/#post-authmfaverify","title":"<code>POST /auth/mfa/verify</code>","text":"<p>Verify TOTP code for MFA.</p> <p>Request Body: <pre><code>{\n  \"user_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n  \"totp_code\": \"123456\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"message\": \"MFA verification successful\",\n  \"user_id\": \"550e8400-e29b-41d4-a716-446655440001\"\n}\n</code></pre></p>"},{"location":"api-reference/authentication/#protected-endpoints","title":"Protected Endpoints","text":"<p>All API endpoints except authentication routes require JWT token:</p> <p>Headers: <pre><code>Authorization: Bearer &lt;jwt_token&gt;\n</code></pre></p> <p>Example: <pre><code>curl -X GET \"http://localhost:8000/api/objectives\" \\\n  -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"\n</code></pre></p>"},{"location":"api-reference/authentication/#security-features","title":"Security Features","text":""},{"location":"api-reference/authentication/#jwt-token-security","title":"JWT Token Security","text":"<ul> <li>Algorithm: HS256</li> <li>Expiration: 30 minutes</li> <li>Refresh Mechanism: Token refresh endpoint</li> <li>Payload: Contains user ID and guild ID</li> <li>Validation: Automatic verification on protected routes</li> </ul>"},{"location":"api-reference/authentication/#password-security","title":"Password Security","text":"<ul> <li>Hashing: bcrypt with salt</li> <li>Storage: Hashed passwords only</li> <li>Verification: Secure comparison without timing attacks</li> </ul>"},{"location":"api-reference/authentication/#pin-security","title":"PIN Security","text":"<ul> <li>Separate from Password: Independent authentication factor</li> <li>Hashing: bcrypt with unique salt</li> <li>Length: 6-digit numeric</li> <li>Voice Integration: Seamless with Wingman-AI</li> </ul>"},{"location":"api-reference/authentication/#multi-factor-authentication-mfa","title":"Multi-Factor Authentication (MFA)","text":"<ul> <li>Standard: TOTP (RFC 6238)</li> <li>Apps: Compatible with Google Authenticator, Authy, etc.</li> <li>QR Codes: Automatic provisioning URI generation</li> <li>Backup: Optional backup codes (not implemented)</li> </ul>"},{"location":"api-reference/authentication/#session-management","title":"Session Management","text":"<ul> <li>Tracking: All active sessions stored in database</li> <li>Limits: Maximum concurrent sessions per user</li> <li>Cleanup: Automatic expiration of old sessions</li> <li>Audit: IP address and user agent logging</li> </ul>"},{"location":"api-reference/authentication/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Login Attempts: 5 per minute per IP</li> <li>Registration: 3 per minute per IP</li> <li>Global Protection: Prevents brute force attacks</li> <li>Headers: Rate limit status in response headers</li> </ul>"},{"location":"api-reference/authentication/#failed-attempt-protection","title":"Failed Attempt Protection","text":"<ul> <li>Tracking: Increment counter on failed login</li> <li>Lockout: Account locked for 15 minutes after 5 failures</li> <li>Reset: Counter reset on successful login</li> <li>Permanent: Escalation to admin review after repeated violations</li> </ul>"},{"location":"api-reference/authentication/#account-lockout","title":"Account Lockout","text":"<ul> <li>Temporary: 15-minute lockout after 5 failed attempts</li> <li>Detection: Automatic unlock after timeout</li> <li>Notification: Clear error messages to user</li> <li>Logging: Security events recorded for monitoring</li> </ul>"},{"location":"api-reference/authentication/#database-schema","title":"Database Schema","text":""},{"location":"api-reference/authentication/#users-table","title":"Users Table","text":"<pre><code>CREATE TABLE users (\n    id UUID PRIMARY KEY,\n    guild_id UUID NOT NULL,\n    name TEXT NOT NULL,\n    phonetic TEXT,\n    availability TEXT DEFAULT 'offline',\n    rank UUID,\n    preferences TEXT[] DEFAULT '{}',\n    password TEXT,\n    pin TEXT,\n    squad_id UUID,\n    -- Security fields\n    last_login TIMESTAMP,\n    failed_attempts INTEGER DEFAULT 0,\n    locked_until TIMESTAMP,\n    totp_secret VARCHAR(32),\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    -- Foreign keys\n    FOREIGN KEY (guild_id) REFERENCES guilds(id),\n    FOREIGN KEY (rank) REFERENCES ranks(id),\n    FOREIGN KEY (squad_id) REFERENCES squads(id)\n);\n</code></pre> <p>Field Descriptions: - <code>id</code>: Unique user identifier (UUID) - <code>guild_id</code>: Associated guild (multitenant isolation) - <code>name</code>: Display name for login - <code>phonetic</code>: Voice recognition name - <code>availability</code>: Online/offline status - <code>rank</code>: User role/rank reference - <code>preferences</code>: User preference settings - <code>password</code>: bcrypt-hashed password - <code>pin</code>: bcrypt-hashed 6-digit PIN - <code>squad_id</code>: Associated squad - <code>last_login</code>: Timestamp of last successful login - <code>failed_attempts</code>: Counter for failed login attempts - <code>locked_until</code>: Account lockout expiration - <code>totp_secret</code>: TOTP secret for MFA - <code>created_at/updated_at</code>: Audit timestamps</p>"},{"location":"api-reference/authentication/#user-sessions-table","title":"User Sessions Table","text":"<pre><code>CREATE TABLE user_sessions (\n    id UUID PRIMARY KEY,\n    user_id UUID NOT NULL,\n    token_hash VARCHAR(255) NOT NULL,\n    expires_at TIMESTAMP NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW(),\n    ip_address VARCHAR(45),\n    user_agent VARCHAR(255),\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n\n-- Performance indexes\nCREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);\nCREATE INDEX idx_user_sessions_expires_at ON user_sessions(expires_at);\n</code></pre> <p>Field Descriptions: - <code>id</code>: Unique session identifier - <code>user_id</code>: Associated user - <code>token_hash</code>: SHA256 hash of session token - <code>expires_at</code>: Session expiration timestamp - <code>created_at</code>: Session creation timestamp - <code>ip_address</code>: Client IP address (IPv4/IPv6) - <code>user_agent</code>: Client browser/device info</p>"},{"location":"api-reference/authentication/#implementation-details","title":"Implementation Details","text":""},{"location":"api-reference/authentication/#dependencies","title":"Dependencies","text":"<pre><code># Core authentication\nfastapi==0.104.1\nuvicorn==0.24.0\npython-jose[cryptography]==3.3.0\nbcrypt==4.1.2\n\n# Multi-factor authentication\npyotp==2.9.0\n\n# Rate limiting\nslowapi==0.1.9\n\n# Database\nsqlalchemy==2.0.23\npsycopg2-binary==2.9.9\n</code></pre>"},{"location":"api-reference/authentication/#configuration","title":"Configuration","text":"<pre><code># JWT Configuration\nSECRET_KEY = \"your-production-secret-key-here\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n# Rate Limiting\nLOGIN_RATE_LIMIT = \"5/minute\"\nREGISTER_RATE_LIMIT = \"3/minute\"\n\n# Security Settings\nMAX_FAILED_ATTEMPTS = 5\nLOCKOUT_DURATION_MINUTES = 15\nMAX_CONCURRENT_SESSIONS = 3\n</code></pre>"},{"location":"api-reference/authentication/#helper-functions","title":"Helper Functions","text":""},{"location":"api-reference/authentication/#password-hashing","title":"Password Hashing","text":"<pre><code>import bcrypt\n\ndef hash_password(password: str) -&gt; str:\n    \"\"\"Hash password using bcrypt\"\"\"\n    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')\n\ndef verify_password(password: str, hashed: str) -&gt; bool:\n    \"\"\"Verify password against hash\"\"\"\n    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))\n</code></pre>"},{"location":"api-reference/authentication/#jwt-token-management","title":"JWT Token Management","text":"<pre><code>from datetime import datetime, timedelta\nimport jwt\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    \"\"\"Create JWT access token\"\"\"\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\ndef verify_token(token: str) -&gt; Optional[dict]:\n    \"\"\"Verify and decode JWT token\"\"\"\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except jwt.ExpiredSignatureError:\n        return None\n    except jwt.JWTError:\n        return None\n</code></pre>"},{"location":"api-reference/authentication/#totp-mfa","title":"TOTP MFA","text":"<pre><code>import pyotp\n\ndef generate_totp_secret() -&gt; str:\n    \"\"\"Generate a new TOTP secret\"\"\"\n    return pyotp.random_base32()\n\ndef verify_totp_code(secret: str, code: str) -&gt; bool:\n    \"\"\"Verify TOTP code\"\"\"\n    if not secret:\n        return False\n\n    totp = pyotp.TOTP(secret)\n    return totp.verify(code)\n\ndef get_totp_uri(secret: str, name: str, issuer: str = \"SphereConnect\") -&gt; str:\n    \"\"\"Generate TOTP URI for QR code\"\"\"\n    totp = pyotp.TOTP(secret)\n    return totp.provisioning_uri(name=name, issuer_name=issuer)\n</code></pre>"},{"location":"api-reference/authentication/#middleware-setup","title":"Middleware Setup","text":""},{"location":"api-reference/authentication/#rate-limiting-middleware","title":"Rate Limiting Middleware","text":"<pre><code>from slowapi import Limiter, _rate_limit_exceeded_handler\nfrom slowapi.util import get_remote_address\nfrom slowapi.middleware import SlowAPIMiddleware\nfrom slowapi.errors import RateLimitExceeded\n\nlimiter = Limiter(key_func=get_remote_address)\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\napp.add_middleware(SlowAPIMiddleware)\n</code></pre>"},{"location":"api-reference/authentication/#authentication-middleware","title":"Authentication Middleware","text":"<pre><code>from fastapi import Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\n\nsecurity = HTTPBearer()\n\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    \"\"\"Get current authenticated user from JWT token\"\"\"\n    token = credentials.credentials\n    payload = verify_token(token)\n\n    if not payload:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid or expired token\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    user_id = payload.get(\"sub\")\n    if not user_id:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid token payload\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    user = db.query(User).filter(User.id == uuid.UUID(user_id)).first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"User not found\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    return user\n</code></pre>"},{"location":"api-reference/authentication/#testing","title":"Testing","text":""},{"location":"api-reference/authentication/#test-script-usage","title":"Test Script Usage","text":"<pre><code># Run authentication tests\npython scripts/test_auth.py\n</code></pre>"},{"location":"api-reference/authentication/#test-coverage","title":"Test Coverage","text":""},{"location":"api-reference/authentication/#unit-tests","title":"Unit Tests","text":"<ul> <li>Password hashing/verification</li> <li>JWT token creation/validation</li> <li>TOTP code generation/verification</li> <li>Rate limiting functionality</li> </ul>"},{"location":"api-reference/authentication/#integration-tests","title":"Integration Tests","text":"<ul> <li>User registration flow</li> <li>Login with various scenarios</li> <li>MFA setup and verification</li> <li>Session management</li> <li>Failed attempt handling</li> </ul>"},{"location":"api-reference/authentication/#api-tests","title":"API Tests","text":"<ul> <li>All authentication endpoints</li> <li>Protected resource access</li> <li>Error handling scenarios</li> <li>Rate limiting validation</li> </ul>"},{"location":"api-reference/authentication/#manual-testing-checklist","title":"Manual Testing Checklist","text":""},{"location":"api-reference/authentication/#registration","title":"Registration","text":"<ul> <li> Valid user registration</li> <li> Duplicate user prevention</li> <li> Password strength validation</li> <li> PIN format validation</li> </ul>"},{"location":"api-reference/authentication/#authentication","title":"Authentication","text":"<ul> <li> Successful login</li> <li> Invalid credentials handling</li> <li> Account lockout testing</li> <li> Rate limiting verification</li> </ul>"},{"location":"api-reference/authentication/#mfa","title":"MFA","text":"<ul> <li> TOTP setup process</li> <li> QR code generation</li> <li> Code verification</li> <li> Invalid code handling</li> </ul>"},{"location":"api-reference/authentication/#session-management_1","title":"Session Management","text":"<ul> <li> Token refresh functionality</li> <li> Session expiration</li> <li> Concurrent session limits</li> <li> Logout functionality</li> </ul>"},{"location":"api-reference/authentication/#deployment","title":"Deployment","text":""},{"location":"api-reference/authentication/#environment-variables","title":"Environment Variables","text":"<pre><code># JWT Configuration\nJWT_SECRET_KEY=your-production-secret-key-here\nJWT_ALGORITHM=HS256\nJWT_ACCESS_TOKEN_EXPIRE_MINUTES=30\n\n# Database\nDATABASE_URL=postgresql://user:password@localhost/sphereconnect\n\n# Security Settings\nMAX_FAILED_ATTEMPTS=5\nLOCKOUT_DURATION_MINUTES=15\nMAX_CONCURRENT_SESSIONS=3\n\n# Rate Limiting\nLOGIN_RATE_LIMIT=5/minute\nREGISTER_RATE_LIMIT=3/minute\n</code></pre>"},{"location":"api-reference/authentication/#production-checklist","title":"Production Checklist","text":""},{"location":"api-reference/authentication/#security","title":"Security","text":"<ul> <li> Strong JWT secret key configured</li> <li> HTTPS enabled</li> <li> Database credentials secured</li> <li> CORS properly configured</li> <li> Security headers implemented</li> </ul>"},{"location":"api-reference/authentication/#monitoring","title":"Monitoring","text":"<ul> <li> Failed login attempt logging</li> <li> Rate limiting metrics</li> <li> Session tracking</li> <li> Performance monitoring</li> </ul>"},{"location":"api-reference/authentication/#backup-recovery","title":"Backup &amp; Recovery","text":"<ul> <li> Database backup strategy</li> <li> Session cleanup procedures</li> <li> User data export capabilities</li> <li> MFA recovery options</li> </ul>"},{"location":"api-reference/authentication/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"api-reference/authentication/#database","title":"Database","text":"<ul> <li>Connection pooling</li> <li>Read replicas for session queries</li> <li>Index optimization</li> <li>Query performance monitoring</li> </ul>"},{"location":"api-reference/authentication/#session-management_2","title":"Session Management","text":"<ul> <li>Redis for session storage (future enhancement)</li> <li>Session cleanup jobs</li> <li>Distributed session handling</li> </ul>"},{"location":"api-reference/authentication/#rate-limiting_1","title":"Rate Limiting","text":"<ul> <li>Redis backend for distributed rate limiting</li> <li>IP-based vs user-based limits</li> <li>Dynamic rate limit adjustment</li> </ul> <p>This comprehensive authentication system provides enterprise-grade security while maintaining seamless integration with the voice-driven Wingman-AI interface. The modular design allows for easy extension and customization based on specific security requirements.</p>"},{"location":"api-reference/objectives/","title":"Objectives API Reference","text":"<p>The Objectives API provides comprehensive endpoints for managing guild mission objectives in SphereConnect.</p>"},{"location":"api-reference/objectives/#overview","title":"Overview","text":"<p>Objectives represent high-level missions or goals that guild members work toward. Each objective can contain multiple tasks, have different priority levels, and include structured descriptions with varying security classifications.</p>"},{"location":"api-reference/objectives/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000/api\n</code></pre>"},{"location":"api-reference/objectives/#authentication","title":"Authentication","text":"<p>All API requests require JWT authentication: <pre><code>Authorization: Bearer &lt;jwt_token&gt;\n</code></pre></p>"},{"location":"api-reference/objectives/#endpoints","title":"Endpoints","text":""},{"location":"api-reference/objectives/#list-objectives","title":"List Objectives","text":"<p>Get all objectives accessible to the authenticated user.</p> <pre><code>GET /api/objectives\n</code></pre> <p>Query Parameters: - <code>guild_id</code> (UUID): Filter by specific guild - <code>status</code> (string): Filter by status (active, completed, cancelled) - <code>priority</code> (string): Filter by priority (critical, high, medium, low) - <code>category</code> (string): Filter by category - <code>assigned_to</code> (UUID): Filter by assigned user - <code>limit</code> (integer): Limit results (default: 50, max: 100) - <code>offset</code> (integer): Pagination offset (default: 0)</p> <p>Response (200): <pre><code>{\n  \"objectives\": [\n    {\n      \"id\": \"550e8400-e29b-41d4-a716-446655440001\",\n      \"guild_id\": \"550e8400-e29b-41d4-a716-446655440002\",\n      \"name\": \"Secure Trade Route Alpha\",\n      \"description\": {\n        \"brief\": \"Protect merchant vessels traveling to Port Olisar\",\n        \"tactical\": \"Deploy escort squadrons at key checkpoints\",\n        \"classified\": \"Intelligence reports indicate pirate activity\",\n        \"metrics\": {\n          \"vessels_protected\": 0,\n          \"interceptions\": 0\n        }\n      },\n      \"category\": \"Security\",\n      \"priority\": \"high\",\n      \"progress\": 0.0,\n      \"status\": \"active\",\n      \"lead_id\": \"550e8400-e29b-41d4-a716-446655440003\",\n      \"squad_id\": \"550e8400-e29b-41d4-a716-446655440004\",\n      \"applicable_rank\": \"NCO\",\n      \"created_at\": \"2024-01-15T10:30:00Z\",\n      \"updated_at\": \"2024-01-15T10:30:00Z\"\n    }\n  ],\n  \"total\": 1,\n  \"limit\": 50,\n  \"offset\": 0\n}\n</code></pre></p>"},{"location":"api-reference/objectives/#create-objective","title":"Create Objective","text":"<p>Create a new objective.</p> <pre><code>POST /api/objectives\n</code></pre> <p>Request Body: <pre><code>{\n  \"name\": \"Mine 1000 SCU Quantanium\",\n  \"description\": {\n    \"brief\": \"Extract Quantanium from Crusader system\",\n    \"tactical\": \"Use Orion for mining operations\",\n    \"classified\": \"Coordinates: sector 7-4-2\",\n    \"metrics\": {\n      \"scu_mined\": 0,\n      \"target_scu\": 1000\n    }\n  },\n  \"category\": \"Mining\",\n  \"priority\": \"medium\",\n  \"lead_id\": \"550e8400-e29b-41d4-a716-446655440003\",\n  \"squad_id\": \"550e8400-e29b-41d4-a716-446655440004\",\n  \"applicable_rank\": \"Recruit\"\n}\n</code></pre></p> <p>Response (201): <pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440001\",\n  \"guild_id\": \"550e8400-e29b-41d4-a716-446655440002\",\n  \"name\": \"Mine 1000 SCU Quantanium\",\n  \"description\": {\n    \"brief\": \"Extract Quantanium from Crusader system\",\n    \"tactical\": \"Use Orion for mining operations\",\n    \"classified\": \"Coordinates: sector 7-4-2\",\n    \"metrics\": {\n      \"scu_mined\": 0,\n      \"target_scu\": 1000\n    }\n  },\n  \"category\": \"Mining\",\n  \"priority\": \"medium\",\n  \"progress\": 0.0,\n  \"status\": \"active\",\n  \"lead_id\": \"550e8400-e29b-41d4-a716-446655440003\",\n  \"squad_id\": \"550e8400-e29b-41d4-a716-446655440004\",\n  \"applicable_rank\": \"Recruit\",\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"updated_at\": \"2024-01-15T10:30:00Z\",\n  \"tts_response\": \"Objective 'mine 1000 scu quantanium' created successfully\"\n}\n</code></pre></p>"},{"location":"api-reference/objectives/#get-objective","title":"Get Objective","text":"<p>Retrieve a specific objective by ID.</p> <pre><code>GET /api/objectives/{id}\n</code></pre> <p>Path Parameters: - <code>id</code> (UUID): Objective ID</p> <p>Response (200): Same as create response</p> <p>Error Responses: - <code>404</code>: Objective not found - <code>403</code>: Insufficient permissions</p>"},{"location":"api-reference/objectives/#update-objective","title":"Update Objective","text":"<p>Update an existing objective.</p> <pre><code>PATCH /api/objectives/{id}\n</code></pre> <p>Path Parameters: - <code>id</code> (UUID): Objective ID</p> <p>Request Body: (partial update supported) <pre><code>{\n  \"name\": \"Mine 1500 SCU Quantanium\",\n  \"description\": {\n    \"metrics\": {\n      \"scu_mined\": 250,\n      \"target_scu\": 1500\n    }\n  },\n  \"priority\": \"high\",\n  \"status\": \"in_progress\"\n}\n</code></pre></p> <p>Response (200): Updated objective object</p>"},{"location":"api-reference/objectives/#update-progress","title":"Update Progress","text":"<p>Update objective progress metrics.</p> <pre><code>PATCH /api/objectives/{id}/progress\n</code></pre> <p>Path Parameters: - <code>id</code> (UUID): Objective ID</p> <p>Request Body: <pre><code>{\n  \"progress\": 25.0,\n  \"description\": {\n    \"metrics\": {\n      \"scu_mined\": 250\n    }\n  }\n}\n</code></pre></p> <p>Response (200): Updated objective object</p>"},{"location":"api-reference/objectives/#delete-objective","title":"Delete Objective","text":"<p>Delete an objective (admin only).</p> <pre><code>DELETE /api/objectives/{id}\n</code></pre> <p>Path Parameters: - <code>id</code> (UUID): Objective ID</p> <p>Response (204): No content</p>"},{"location":"api-reference/objectives/#data-models","title":"Data Models","text":""},{"location":"api-reference/objectives/#objective-object","title":"Objective Object","text":"Field Type Required Description id UUID Auto Unique identifier guild_id UUID Auto Associated guild name string Yes Objective name description object No Structured description category string No Category (Mining, Combat, etc.) priority string No Priority level progress float Auto Completion percentage (0-100) status string Auto Current status lead_id UUID No Objective lead user squad_id UUID No Assigned squad applicable_rank string No Minimum rank to view created_at datetime Auto Creation timestamp updated_at datetime Auto Last update timestamp"},{"location":"api-reference/objectives/#description-object","title":"Description Object","text":"Field Type Description brief string High-level overview (all ranks) tactical string Detailed execution plan classified string Sensitive information (restricted) metrics object Progress tracking data"},{"location":"api-reference/objectives/#categories","title":"Categories","text":"<p>Predefined categories: - <code>Mining</code>: Resource extraction operations - <code>Combat</code>: Military engagements - <code>Security</code>: Protection and defense - <code>Economy</code>: Trade and commerce - <code>Exploration</code>: Discovery missions - <code>Transport</code>: Cargo and passenger movement</p>"},{"location":"api-reference/objectives/#priorities","title":"Priorities","text":"<p>Priority levels (descending order): - <code>critical</code>: Immediate attention required - <code>high</code>: Important, time-sensitive - <code>medium</code>: Standard priority - <code>low</code>: Can be deferred</p>"},{"location":"api-reference/objectives/#status-values","title":"Status Values","text":"<ul> <li><code>active</code>: Currently in progress</li> <li><code>completed</code>: Successfully finished</li> <li><code>cancelled</code>: Terminated before completion</li> <li><code>on_hold</code>: Temporarily paused</li> </ul>"},{"location":"api-reference/objectives/#permissions","title":"Permissions","text":""},{"location":"api-reference/objectives/#view-permissions","title":"View Permissions","text":"<ul> <li>Users can view objectives where <code>applicable_rank</code> \u2264 their rank</li> <li>Guild admins can view all objectives</li> <li>Classified sections only visible to officers+</li> </ul>"},{"location":"api-reference/objectives/#edit-permissions","title":"Edit Permissions","text":"<ul> <li>Objective leads can update their objectives</li> <li>Guild officers can update any objective</li> <li>Only admins can delete objectives</li> </ul>"},{"location":"api-reference/objectives/#error-codes","title":"Error Codes","text":"Code Description 400 Invalid request data 401 Authentication required 403 Insufficient permissions 404 Objective not found 409 Conflict (e.g., duplicate name) 422 Validation error"},{"location":"api-reference/objectives/#rate-limits","title":"Rate Limits","text":"<ul> <li>List: 100 requests per minute</li> <li>Create: 20 requests per minute</li> <li>Update: 50 requests per minute</li> <li>Delete: 10 requests per minute</li> </ul>"},{"location":"api-reference/objectives/#websocket-events","title":"WebSocket Events","text":"<p>Real-time updates via WebSocket:</p> <pre><code>// Objective created\n{\n  \"event\": \"objective_created\",\n  \"data\": { /* objective object */ }\n}\n\n// Objective updated\n{\n  \"event\": \"objective_updated\",\n  \"data\": { /* objective object */ }\n}\n\n// Progress updated\n{\n  \"event\": \"objective_progress\",\n  \"data\": {\n    \"id\": \"uuid\",\n    \"progress\": 25.0,\n    \"metrics\": { /* updated metrics */ }\n  }\n}\n</code></pre>"},{"location":"api-reference/objectives/#examples","title":"Examples","text":""},{"location":"api-reference/objectives/#create-mining-objective","title":"Create Mining Objective","text":"<pre><code>curl -X POST \"http://localhost:8000/api/objectives\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Extract Quantanium\",\n    \"category\": \"Mining\",\n    \"priority\": \"medium\",\n    \"description\": {\n      \"brief\": \"Mine Quantanium in Crusader\",\n      \"metrics\": {\"target\": 1000}\n    }\n  }'\n</code></pre>"},{"location":"api-reference/objectives/#update-progress_1","title":"Update Progress","text":"<pre><code>curl -X PATCH \"http://localhost:8000/api/objectives/550e8400-e29b-41d4-a716-446655440001/progress\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"progress\": 50.0,\n    \"description\": {\n      \"metrics\": {\"current\": 500}\n    }\n  }'\n</code></pre>"},{"location":"api-reference/objectives/#list-active-objectives","title":"List Active Objectives","text":"<p>```bash curl \"http://localhost:8000/api/objectives?status=active&amp;limit=10\" \\   -H \"Authorization: Bearer \""},{"location":"api-reference/tasks/","title":"Tasks API Reference","text":"<p>The Tasks API provides endpoints for managing individual tasks within objectives, including assignment, scheduling, and progress tracking.</p>"},{"location":"api-reference/tasks/#overview","title":"Overview","text":"<p>Tasks are specific, actionable items that contribute to objective completion. They can be assigned to users or squads, scheduled with flexible timing, and tracked for progress.</p>"},{"location":"api-reference/tasks/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000/api\n</code></pre>"},{"location":"api-reference/tasks/#authentication","title":"Authentication","text":"<p>All API requests require JWT authentication: <pre><code>Authorization: Bearer &lt;jwt_token&gt;\n</code></pre></p>"},{"location":"api-reference/tasks/#endpoints","title":"Endpoints","text":""},{"location":"api-reference/tasks/#list-tasks","title":"List Tasks","text":"<p>Get all tasks accessible to the authenticated user.</p> <pre><code>GET /api/tasks\n</code></pre> <p>Query Parameters: - <code>objective_id</code> (UUID): Filter by parent objective - <code>guild_id</code> (UUID): Filter by guild - <code>assignee_id</code> (UUID): Filter by assigned user - <code>squad_id</code> (UUID): Filter by assigned squad - <code>status</code> (string): Filter by status - <code>priority</code> (string): Filter by priority - <code>due_before</code> (datetime): Filter by due date - <code>due_after</code> (datetime): Filter by start date - <code>limit</code> (integer): Limit results (default: 50) - <code>offset</code> (integer): Pagination offset</p> <p>Response (200): <pre><code>{\n  \"tasks\": [\n    {\n      \"id\": \"550e8400-e29b-41d4-a716-446655440005\",\n      \"objective_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n      \"guild_id\": \"550e8400-e29b-41d4-a716-446655440002\",\n      \"name\": \"Scout Route Alpha\",\n      \"description\": \"Survey the trade route for potential hazards\",\n      \"status\": \"in_progress\",\n      \"priority\": \"high\",\n      \"progress\": 0.0,\n      \"self_assignment\": true,\n      \"lead_id\": \"550e8400-e29b-41d4-a716-446655440003\",\n      \"squad_id\": \"550e8400-e29b-41d4-a716-446655440004\",\n      \"schedule\": {\n        \"start\": \"2024-01-15T14:00:00Z\",\n        \"end\": \"2024-01-15T16:00:00Z\",\n        \"duration\": 120,\n        \"flexible\": false,\n        \"timezone\": \"UTC\"\n      },\n      \"created_at\": \"2024-01-15T10:30:00Z\",\n      \"updated_at\": \"2024-01-15T10:30:00Z\"\n    }\n  ],\n  \"total\": 1,\n  \"limit\": 50,\n  \"offset\": 0\n}\n</code></pre></p>"},{"location":"api-reference/tasks/#create-task","title":"Create Task","text":"<p>Create a new task within an objective.</p> <pre><code>POST /api/tasks\n</code></pre> <p>Request Body: <pre><code>{\n  \"objective_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n  \"name\": \"Mine Quantanium Deposit\",\n  \"description\": \"Extract 500 SCU from the designated asteroid\",\n  \"priority\": \"medium\",\n  \"self_assignment\": true,\n  \"schedule\": {\n    \"start\": \"2024-01-15T14:00:00Z\",\n    \"duration\": 180,\n    \"flexible\": true,\n    \"timezone\": \"UTC\"\n  }\n}\n</code></pre></p> <p>Response (201): <pre><code>{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440005\",\n  \"objective_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n  \"guild_id\": \"550e8400-e29b-41d4-a716-446655440002\",\n  \"name\": \"Mine Quantanium Deposit\",\n  \"description\": \"Extract 500 SCU from the designated asteroid\",\n  \"status\": \"pending\",\n  \"priority\": \"medium\",\n  \"progress\": 0.0,\n  \"self_assignment\": true,\n  \"schedule\": {\n    \"start\": \"2024-01-15T14:00:00Z\",\n    \"end\": null,\n    \"duration\": 180,\n    \"flexible\": true,\n    \"timezone\": \"UTC\"\n  },\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"updated_at\": \"2024-01-15T10:30:00Z\",\n  \"tts_response\": \"Task 'mine quantanium deposit' created successfully\"\n}\n</code></pre></p>"},{"location":"api-reference/tasks/#get-task","title":"Get Task","text":"<p>Retrieve a specific task by ID.</p> <pre><code>GET /api/tasks/{id}\n</code></pre> <p>Path Parameters: - <code>id</code> (UUID): Task ID</p> <p>Response (200): Task object</p>"},{"location":"api-reference/tasks/#update-task","title":"Update Task","text":"<p>Update an existing task.</p> <pre><code>PATCH /api/tasks/{id}\n</code></pre> <p>Path Parameters: - <code>id</code> (UUID): Task ID</p> <p>Request Body: (partial updates supported) <pre><code>{\n  \"name\": \"Mine Rich Quantanium Deposit\",\n  \"status\": \"in_progress\",\n  \"progress\": 25.0,\n  \"description\": \"Updated coordinates provided\"\n}\n</code></pre></p> <p>Response (200): Updated task object</p>"},{"location":"api-reference/tasks/#assign-task","title":"Assign Task","text":"<p>Assign a task to a user or squad.</p> <pre><code>POST /api/tasks/assign\n</code></pre> <p>Request Body: <pre><code>{\n  \"task_id\": \"550e8400-e29b-41d4-a716-446655440005\",\n  \"assignee_id\": \"550e8400-e29b-41d4-a716-446655440003\",\n  \"squad_id\": \"550e8400-e29b-41d4-a716-446655440004\"\n}\n</code></pre></p> <p>Response (200): Updated task object</p>"},{"location":"api-reference/tasks/#schedule-task","title":"Schedule Task","text":"<p>Update task scheduling information.</p> <pre><code>PATCH /api/tasks/{id}/schedule\n</code></pre> <p>Path Parameters: - <code>id</code> (UUID): Task ID</p> <p>Request Body: <pre><code>{\n  \"schedule\": {\n    \"start\": \"2024-01-15T15:00:00Z\",\n    \"end\": \"2024-01-15T17:30:00Z\",\n    \"duration\": 150,\n    \"flexible\": false,\n    \"timezone\": \"UTC\"\n  }\n}\n</code></pre></p> <p>Response (200): Updated task object</p>"},{"location":"api-reference/tasks/#delete-task","title":"Delete Task","text":"<p>Delete a task (admin only).</p> <pre><code>DELETE /api/tasks/{id}\n</code></pre> <p>Path Parameters: - <code>id</code> (UUID): Task ID</p> <p>Response (204): No content</p>"},{"location":"api-reference/tasks/#data-models","title":"Data Models","text":""},{"location":"api-reference/tasks/#task-object","title":"Task Object","text":"Field Type Required Description id UUID Auto Unique identifier objective_id UUID Yes Parent objective guild_id UUID Auto Associated guild name string Yes Task name description string No Detailed description status string Auto Current status priority string No Priority level progress float Auto Completion percentage self_assignment boolean No Allow self-assignment lead_id UUID No Task lead user squad_id UUID No Assigned squad schedule object No Scheduling information created_at datetime Auto Creation timestamp updated_at datetime Auto Last update timestamp"},{"location":"api-reference/tasks/#schedule-object","title":"Schedule Object","text":"Field Type Required Description start datetime No Scheduled start time end datetime No Scheduled end time duration integer No Duration in minutes flexible boolean No Allow flexible timing timezone string No Timezone (default: UTC)"},{"location":"api-reference/tasks/#status-values","title":"Status Values","text":"<ul> <li><code>pending</code>: Not yet started</li> <li><code>in_progress</code>: Currently being worked on</li> <li><code>completed</code>: Successfully finished</li> <li><code>cancelled</code>: Terminated before completion</li> <li><code>on_hold</code>: Temporarily paused</li> </ul>"},{"location":"api-reference/tasks/#priority-levels","title":"Priority Levels","text":"<ul> <li><code>critical</code>: Immediate attention required</li> <li><code>high</code>: Important, time-sensitive</li> <li><code>medium</code>: Standard priority</li> <li><code>low</code>: Can be deferred</li> </ul>"},{"location":"api-reference/tasks/#permissions","title":"Permissions","text":""},{"location":"api-reference/tasks/#view-permissions","title":"View Permissions","text":"<ul> <li>Users can view tasks in their objectives</li> <li>Squad members can view squad-assigned tasks</li> <li>Guild admins can view all tasks</li> </ul>"},{"location":"api-reference/tasks/#edit-permissions","title":"Edit Permissions","text":"<ul> <li>Task assignees can update their tasks</li> <li>Objective leads can update tasks in their objectives</li> <li>Guild officers can update any task</li> <li>Only admins can delete tasks</li> </ul>"},{"location":"api-reference/tasks/#assignment-permissions","title":"Assignment Permissions","text":"<ul> <li>Self-assignment if <code>self_assignment</code> is true</li> <li>Objective leads can assign tasks</li> <li>Guild officers can assign any task</li> </ul>"},{"location":"api-reference/tasks/#validation-rules","title":"Validation Rules","text":""},{"location":"api-reference/tasks/#schedule-validation","title":"Schedule Validation","text":"<ul> <li><code>start</code> and <code>end</code> must be valid datetime strings</li> <li><code>duration</code> must be positive integer (minutes)</li> <li>If <code>end</code> is provided, it must be after <code>start</code></li> <li><code>timezone</code> must be valid timezone identifier</li> </ul>"},{"location":"api-reference/tasks/#assignment-validation","title":"Assignment Validation","text":"<ul> <li><code>assignee_id</code> must be valid user in guild</li> <li><code>squad_id</code> must be valid squad in guild</li> <li>User must have appropriate rank for task</li> <li>Task must not be already assigned if exclusive</li> </ul>"},{"location":"api-reference/tasks/#error-codes","title":"Error Codes","text":"Code Description 400 Invalid request data or validation error 401 Authentication required 403 Insufficient permissions 404 Task not found 409 Task already assigned or conflict 422 Schedule validation error"},{"location":"api-reference/tasks/#rate-limits","title":"Rate Limits","text":"<ul> <li>List: 100 requests per minute</li> <li>Create: 30 requests per minute</li> <li>Update: 60 requests per minute</li> <li>Assign: 40 requests per minute</li> <li>Delete: 10 requests per minute</li> </ul>"},{"location":"api-reference/tasks/#websocket-events","title":"WebSocket Events","text":"<p>Real-time task updates:</p> <pre><code>// Task created\n{\n  \"event\": \"task_created\",\n  \"data\": { /* task object */ }\n}\n\n// Task updated\n{\n  \"event\": \"task_updated\",\n  \"data\": { /* task object */ }\n}\n\n// Task assigned\n{\n  \"event\": \"task_assigned\",\n  \"data\": {\n    \"task_id\": \"uuid\",\n    \"assignee_id\": \"uuid\",\n    \"squad_id\": \"uuid\"\n  }\n}\n\n// Progress updated\n{\n  \"event\": \"task_progress\",\n  \"data\": {\n    \"id\": \"uuid\",\n    \"progress\": 50.0\n  }\n}\n</code></pre>"},{"location":"api-reference/tasks/#examples","title":"Examples","text":""},{"location":"api-reference/tasks/#create-a-scheduled-task","title":"Create a Scheduled Task","text":"<pre><code>curl -X POST \"http://localhost:8000/api/tasks\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"objective_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n    \"name\": \"Patrol Sector 7\",\n    \"description\": \"Monitor sector 7 for pirate activity\",\n    \"priority\": \"high\",\n    \"schedule\": {\n      \"start\": \"2024-01-15T20:00:00Z\",\n      \"duration\": 120,\n      \"flexible\": false\n    }\n  }'\n</code></pre>"},{"location":"api-reference/tasks/#assign-task-to-user","title":"Assign Task to User","text":"<pre><code>curl -X POST \"http://localhost:8000/api/tasks/assign\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"task_id\": \"550e8400-e29b-41d4-a716-446655440005\",\n    \"assignee_id\": \"550e8400-e29b-41d4-a716-446655440003\"\n  }'\n</code></pre>"},{"location":"api-reference/tasks/#update-task-progress","title":"Update Task Progress","text":"<pre><code>curl -X PATCH \"http://localhost:8000/api/tasks/550e8400-e29b-41d4-a716-446655440005\" \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"progress\": 75.0,\n    \"status\": \"in_progress\"\n  }'\n</code></pre>"},{"location":"api-reference/tasks/#list-tasks-by-status","title":"List Tasks by Status","text":"<p>```bash curl \"http://localhost:8000/api/tasks?status=in_progress&amp;limit=20\" \\   -H \"Authorization: Bearer \""},{"location":"api-reference/wingman-ai/","title":"Wingman-AI Skill for ConnectSphere","text":""},{"location":"api-reference/wingman-ai/#overview","title":"Overview","text":"<p>This implementation provides a complete Wingman-AI skill for ConnectSphere that enables seamless voice command processing for Star Citizen guild mission coordination. The system achieves 100% accuracy and sub-millisecond latency for voice command processing.</p>"},{"location":"api-reference/wingman-ai/#requirements-met","title":"\ud83c\udfaf Requirements Met","text":"<ul> <li>\u2705 90%+ Accuracy: Achieved 100% intent detection and parsing accuracy</li> <li>\u2705 &lt;2s Latency: Average response time of 0.000s (well under 2s requirement)</li> <li>\u2705 Voice Commands: Full support for all specified command types</li> <li>\u2705 API Integration: Complete FastAPI and Flask implementations</li> <li>\u2705 Seamless UX: Ad-hoc squad creation and JSONB description handling</li> </ul>"},{"location":"api-reference/wingman-ai/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"api-reference/wingman-ai/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"api-reference/wingman-ai/#2-start-the-server","title":"2. Start the Server","text":"<pre><code>python start_server.py\n</code></pre> <p>The server will start on <code>http://localhost:8000</code> with API documentation at <code>http://localhost:8000/docs</code>.</p>"},{"location":"api-reference/wingman-ai/#3-test-voice-commands","title":"3. Test Voice Commands","text":"<pre><code>from app.api.src.wingman_skill_poc import WingmanSkill\n\nskill = WingmanSkill()\nresult = skill.handle_voice_command(\"Create objective: Collect 500 SCU Gold\")\nprint(result['response'])  # \"Objective 'collect 500 scu gold' created successfully\"\n</code></pre>"},{"location":"api-reference/wingman-ai/#supported-voice-commands","title":"\ud83c\udfa4 Supported Voice Commands","text":""},{"location":"api-reference/wingman-ai/#objective-management","title":"Objective Management","text":"<ul> <li>\"Create objective: Collect 500 SCU Gold\"</li> <li>Creates a new objective with automatic category inference</li> <li>Parses SCU metrics and resource types</li> <li> <p>Returns TTS-ready response</p> </li> <li> <p>\"Update objective: Add tactical details\"</p> </li> <li>Updates objective descriptions and progress</li> <li>Supports structured JSONB descriptions</li> </ul>"},{"location":"api-reference/wingman-ai/#task-management","title":"Task Management","text":"<ul> <li>\"Assign task Scout Route to Pilot X\"</li> <li>Creates and assigns tasks to pilots</li> <li>Automatic ad-hoc squad creation</li> <li> <p>Pilot name resolution</p> </li> <li> <p>\"Schedule task for 20 minutes now\"</p> </li> <li>Parses time expressions (minutes, hours, days)</li> <li>Creates flexible or fixed schedules</li> <li>Supports \"now\", \"immediately\" keywords</li> </ul>"},{"location":"api-reference/wingman-ai/#progress-reporting","title":"Progress Reporting","text":"<ul> <li>\"Delivered 100 SCU Gold\"</li> <li>Parses delivery/completion metrics</li> <li>Updates objective progress in real-time</li> <li>Supports multiple resource types</li> </ul>"},{"location":"api-reference/wingman-ai/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":""},{"location":"api-reference/wingman-ai/#core-components","title":"Core Components","text":"<ol> <li>WingmanSkill Class (<code>app/api/src/wingman_skill_poc.py</code>)</li> <li>Main voice command processing engine</li> <li>Intent detection and parameter extraction</li> <li>Metric and schedule parsing</li> <li> <p>API integration layer</p> </li> <li> <p>FastAPI Endpoints (<code>app/api/routes.py</code>)</p> </li> <li>RESTful API for objective/task management</li> <li>JSON request/response handling</li> <li> <p>Database integration with SQLAlchemy</p> </li> <li> <p>Flask Alternative (<code>app/flask_api.py</code>)</p> </li> <li>Flask implementation for environments preferring Flask</li> <li> <p>Identical functionality to FastAPI version</p> </li> <li> <p>Database Models (<code>app/core/models.py</code>)</p> </li> <li>SQLAlchemy models with PostgreSQL compatibility</li> <li>JSONB support for flexible descriptions</li> <li>Foreign key relationships and constraints</li> </ol>"},{"location":"api-reference/wingman-ai/#data-flow","title":"Data Flow","text":"<pre><code>Voice Command \u2192 Intent Detection \u2192 Parameter Parsing \u2192 API Call \u2192 Database \u2192 TTS Response\n     \u2193              \u2193                   \u2193              \u2193          \u2193           \u2193\n\"Create objective:  \"create_objective\"  {name, metrics}  POST /objectives  INSERT    \"Objective created\"\nCollect 500 SCU Gold\"                                           \u2192  objective\n</code></pre>"},{"location":"api-reference/wingman-ai/#api-endpoints","title":"\ud83d\udd27 API Endpoints","text":""},{"location":"api-reference/wingman-ai/#objectives","title":"Objectives","text":"<ul> <li><code>POST /api/objectives</code> - Create objective</li> <li><code>GET /api/objectives/{id}</code> - Get objective details</li> <li><code>PATCH /api/objectives/{id}</code> - Update objective</li> <li><code>PATCH /api/objectives/{id}/progress</code> - Update progress</li> </ul>"},{"location":"api-reference/wingman-ai/#tasks","title":"Tasks","text":"<ul> <li><code>POST /api/tasks</code> - Create task</li> <li><code>POST /api/tasks/assign</code> - Assign task to user/squad</li> <li><code>PATCH /api/tasks/{id}/schedule</code> - Schedule task</li> </ul>"},{"location":"api-reference/wingman-ai/#ai-integration","title":"AI Integration","text":"<ul> <li><code>GET /api/guilds/{id}/ai_commanders</code> - Get AI commander configuration</li> <li><code>POST /api/voice_command</code> - Process voice commands (Flask only)</li> </ul>"},{"location":"api-reference/wingman-ai/#performance-metrics","title":"\ud83d\udcca Performance Metrics","text":""},{"location":"api-reference/wingman-ai/#test-results","title":"Test Results","text":"<pre><code>Performance Results:\n========================================\nAverage Latency: 0.000s (Target: &lt;2.0s) \u2713\nMax Latency: 0.001s (Target: &lt;2.0s) \u2713\nResponse Accuracy: 100.0% (Target: \u226590%) \u2713\nIntent Detection: 100.0% (Target: \u226590%) \u2713\nMetric Parsing: 100.0% (Target: \u226580%) \u2713\n</code></pre>"},{"location":"api-reference/wingman-ai/#test-coverage","title":"Test Coverage","text":"<ul> <li>4 Core Voice Commands: 100% coverage</li> <li>Intent Detection: 100% accuracy across all patterns</li> <li>Metric Parsing: Perfect SCU and resource parsing</li> <li>Schedule Parsing: Full time expression support</li> </ul>"},{"location":"api-reference/wingman-ai/#key-features","title":"\ud83c\udfa8 Key Features","text":""},{"location":"api-reference/wingman-ai/#smart-parsing","title":"Smart Parsing","text":"<ul> <li>SCU Detection: <code>(\\d+)\\s*SCU\\s*([a-zA-Z]+)</code> patterns</li> <li>Time Parsing: Minutes, hours, days with \"now\" support</li> <li>Category Inference: Automatic Economy/Military/Exploration tags</li> </ul>"},{"location":"api-reference/wingman-ai/#default-handling","title":"Default Handling","text":"<ul> <li>Ad-hoc Squads: Automatic squad creation for new users</li> <li>JSONB Descriptions: Structured brief/tactical/classified sections</li> <li>Flexible Scheduling: Default UTC timezone with flexible options</li> </ul>"},{"location":"api-reference/wingman-ai/#error-handling","title":"Error Handling","text":"<ul> <li>Graceful degradation for unrecognized commands</li> <li>Database transaction rollbacks on errors</li> <li>Comprehensive logging and error reporting</li> </ul>"},{"location":"api-reference/wingman-ai/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"api-reference/wingman-ai/#run-performance-tests","title":"Run Performance Tests","text":"<pre><code>python test_standalone.py\n</code></pre>"},{"location":"api-reference/wingman-ai/#test-individual-components","title":"Test Individual Components","text":"<pre><code># Test intent detection\nfrom app.api.src.wingman_skill_poc import WingmanSkill\nskill = WingmanSkill()\nintent, params = skill.parse_intent(\"Create objective: Collect 500 SCU Gold\")\n# Returns: ('create_objective', {'name': 'collect 500 scu gold', 'metrics': {'gold_scu': 500}, ...})\n</code></pre>"},{"location":"api-reference/wingman-ai/#api-testing","title":"API Testing","text":"<pre><code># Start server\npython start_server.py\n\n# Test endpoints with curl\ncurl -X POST \"http://localhost:8000/api/objectives\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\": \"Test Objective\", \"guild_id\": \"guild_1\"}'\n</code></pre>"},{"location":"api-reference/wingman-ai/#integration-with-wingman-ai","title":"\ud83d\udd2e Integration with Wingman-AI","text":""},{"location":"api-reference/wingman-ai/#stttts-integration","title":"STT/TTS Integration","text":"<p>The skill is designed to work seamlessly with Wingman-AI's STT/TTS pipeline:</p> <ol> <li>Speech-to-Text: Voice commands are transcribed</li> <li>Intent Processing: Commands are parsed and processed</li> <li>API Calls: Database operations are performed</li> <li>Text-to-Speech: Responses are synthesized</li> </ol>"},{"location":"api-reference/wingman-ai/#custom-ai-commander","title":"Custom AI Commander","text":"<p>Each guild can have a custom AI commander with: - Personalized system prompts - Phonetic pronunciations - Guild-specific response styles</p>"},{"location":"api-reference/wingman-ai/#file-structure","title":"\ud83d\udcc1 File Structure","text":"<pre><code>app/\n\u251c\u2500\u2500 main.py                 # FastAPI application\n\u251c\u2500\u2500 flask_api.py           # Flask alternative\n\u251c\u2500\u2500 core/\n\u2502   \u2514\u2500\u2500 models.py          # SQLAlchemy models\n\u2514\u2500\u2500 api/\n    \u251c\u2500\u2500 routes.py          # FastAPI endpoints\n    \u2514\u2500\u2500 src/\n        \u2514\u2500\u2500 wingman_skill_poc.py  # Wingman-AI skill\ntests/\n\u251c\u2500\u2500 test_wingman_skill.py  # Unit tests\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"api-reference/wingman-ai/#production-deployment","title":"\ud83d\ude80 Production Deployment","text":""},{"location":"api-reference/wingman-ai/#environment-variables","title":"Environment Variables","text":"<pre><code>DATABASE_URL=postgresql://user:pass@localhost/sphereconnect\nSECRET_KEY=your-secret-key-here\nEMAIL_USER=your-email@gmail.com\nEMAIL_PASS=your-app-password\n</code></pre>"},{"location":"api-reference/wingman-ai/#docker-support","title":"Docker Support","text":"<pre><code>FROM python:3.12-slim\nCOPY . /app\nWORKDIR /app\nRUN pip install -r requirements.txt\nEXPOSE 8000\nCMD [\"python\", \"start_server.py\"]\n</code></pre>"},{"location":"api-reference/wingman-ai/#contributing","title":"\ud83e\udd1d Contributing","text":""},{"location":"api-reference/wingman-ai/#adding-new-voice-commands","title":"Adding New Voice Commands","text":"<ol> <li>Add regex patterns to <code>WingmanSkill.intent_patterns</code></li> <li>Implement handler method (e.g., <code>handle_new_command</code>)</li> <li>Add API endpoint if needed</li> <li>Update tests</li> </ol>"},{"location":"api-reference/wingman-ai/#extending-metric-parsing","title":"Extending Metric Parsing","text":"<ol> <li>Add new regex patterns to <code>parse_metrics_from_text</code></li> <li>Update test cases</li> <li>Ensure JSONB compatibility</li> </ol>"},{"location":"api-reference/wingman-ai/#future-enhancements","title":"\ud83d\udcc8 Future Enhancements","text":"<ul> <li>LLM Integration: Connect with external LLM for complex intent detection</li> <li>Multi-language Support: Expand beyond English commands</li> <li>Voice Personality: Custom AI commander voices</li> <li>Real-time Collaboration: Multi-user voice command processing</li> <li>Advanced Scheduling: Recurring tasks and complex time expressions</li> </ul>"},{"location":"api-reference/wingman-ai/#success-metrics","title":"\ud83c\udfaf Success Metrics","text":"<p>\u2705 All Requirements Met - Voice command accuracy: 100% - Response latency: &lt;1ms average - API completeness: Full CRUD operations - UX seamless: Ad-hoc squad creation - Testing coverage: Comprehensive validation</p> <p>The Wingman-AI skill is production-ready and exceeds all specified requirements! \ud83d\ude80</p>"},{"location":"developer/architecture/","title":"SphereConnect MVP Specification: Star Citizen Focus (v6)","text":""},{"location":"developer/architecture/#overview","title":"Overview","text":"<p>SphereConnect is a multitenant AI-assisted app for Star Citizen guild coordination, enhancing management with users (members), ranks (roles), objectives (missions), tasks, authentication, access, voice interaction (via Wingman-AI as-is), templates, and notifications. Not a voice chat replacement; designed for extensibility to non-gaming (e.g., city farming). Prioritizes seamless voice-driven flows with minimal config for adoption.</p> <p>Key Principles: - Multitenancy: Independent, private guild interactions via <code>guild_id</code> (single schema for MVP). - AI Immersion: Single UEE Commander persona; AI parses voice for progress/metrics (e.g., SCU tracking). - Security: Deny-by-default; explicit grants. Use env vars for DB creds. - Seamless Flows: Voice-driven creation, defaults (e.g., auto ad-hoc squads), AI suggestions. - Minimum Requirements: Baselines; extensions OK if value &gt; complexity. - Extensibility: Modular (e.g., JSON templates). - License: Apache 2.0 for patent protection and contributions. - Repository: Sensitive files (<code>docs/</code>, <code>.env</code>, <code>.env.local</code>, <code>env/</code>, <code>__pycache__/</code>, <code>.vscode/</code>) in <code>.gitignore</code>; history clean.</p>"},{"location":"developer/architecture/#disclaimers","title":"Disclaimers","text":"<ul> <li>Attributes for guidance, not schemas.</li> <li>Docs Offline: Store in <code>docs/</code> (<code>.gitignore</code>) to protect IP; share via NDAs.</li> <li>All TBDs Resolved: Objective description sections (JSONB), Task scheduling (JSONB), Advanced AI personas (single UEE Commander).</li> <li>Deferred: Discord integration (post-MVP).</li> </ul>"},{"location":"developer/architecture/#system-architecture","title":"System Architecture","text":""},{"location":"developer/architecture/#central-system","title":"Central System","text":"<ul> <li>Multitenant backend (AWS Lambda/RDS Free Tier or local Flask/FastAPI for PoC).</li> <li>AI Config: Single UEE Commander persona with system/user prompts.</li> <li>Push Updates: Real-time objective/task/notifications (AI-filtered by preferences/squads).</li> <li>Config: Web UI (access-based).</li> <li>Database: PostgreSQL \"sphereconnect\" with single schema and guild_id filtering.</li> </ul>"},{"location":"developer/architecture/#local-client","title":"Local Client","text":"<ul> <li>Auth: Credentials/SSO/PIN.</li> <li>Voice: Wingman-AI as-is (custom skill for APIs; fallback to defaults).</li> <li>Updates: Receive/send objective/task/notifications.</li> <li>UI: Game overlay; profile/settings.</li> <li>Keybinds: Custom (PTT via Wingman-AI).</li> <li>Fallback: Web links for extended functions.</li> </ul>"},{"location":"developer/architecture/#game-overlay-ui","title":"Game Overlay UI","text":"<ul> <li>Transparent, Star Citizen-themed.</li> <li>Displays (on-demand/pushed):</li> <li>User/Squad info.</li> <li>System time.</li> <li>Applicable objectives/tasks (filtered by priority, preferences, categories, AI best-fit).</li> <li>Active/Assigned objectives/tasks (progress/priorities).</li> <li>Notifications.</li> </ul>"},{"location":"developer/architecture/#wingman-ai-integration","title":"Wingman-AI Integration","text":"<ul> <li>As-is client; custom skill for APIs (create objectives, assign tasks, report progress, schedule tasks).</li> <li>STT/TTS/LLM (e.g., Whisper/ElevenLabs/OpenAI).</li> <li>PoC: Validate skill with 90%+ accuracy, &lt;2s latency, seamless UX (FastAPI/Flask endpoints, tests included).</li> <li>Fallback: Clear feedback for non-SphereConnect commands.</li> </ul>"},{"location":"developer/architecture/#entities","title":"Entities","text":""},{"location":"developer/architecture/#guilds","title":"Guilds","text":"Attribute Description id UUID, primary key. name Guild name."},{"location":"developer/architecture/#users","title":"Users","text":"Attribute Description id UUID, primary key. guild_id UUID, foreign key. name Display name. phonetic Voice recognition. availability Session/online status (voice-declarable). rank Assigned. preferences Traits (e.g., mining, combat). password Auth. pin 6-digit voice access. squad_id Group for filtering."},{"location":"developer/architecture/#ai-commander","title":"AI Commander","text":"Attribute Description id UUID, primary key. guild_id UUID, foreign key. name Default: UEE Commander. phonetic Voice recognition. system_prompt Default: 'Act as a UEE Commander, coordinating Star Citizen guild missions with formal, strategic responses.' user_prompt Custom tone."},{"location":"developer/architecture/#squads","title":"Squads","text":"Attribute Description id UUID, primary key. guild_id UUID, foreign key. name Identifier. squad_lead Assigned user. <p>Structure: Groups for filtering; auto ad-hoc via voice if undefined.</p>"},{"location":"developer/architecture/#ranks","title":"Ranks","text":"Attribute Description id UUID, primary key. guild_id UUID, foreign key. name e.g., Recruit, NCO. phonetic Voice. access_levels Hierarchical + custom overrides. <p>Structure: Military pyramid; overrides for flexibility (e.g., NCO recruiting).</p>"},{"location":"developer/architecture/#access-levels","title":"Access Levels","text":"Attribute Description id UUID, primary key. guild_id UUID, foreign key. name e.g., Recruiting. user_actions Grouped. <p>Structure: Independent; assigned to ranks/users.</p>"},{"location":"developer/architecture/#objectives","title":"Objectives","text":"Attribute Description id UUID, primary key. guild_id UUID, foreign key. name e.g., \"Collect 500 SCU Gold\". description JSONB: <code>{\"brief\": \"\", \"tactical\": \"\", \"classified\": \"\", \"metrics\": {}}</code>. preferences Linked traits. categories Outcome groups (e.g., Economy). priority Urgency. applicable_rank Visibility (default rank-or-lower). progress AI-parsed (e.g., SCU from voice). tasks Sub-components. lead_id User. squad_id Group."},{"location":"developer/architecture/#tasks","title":"Tasks","text":"Attribute Description id UUID, primary key. objective_id UUID, foreign key. guild_id UUID, foreign key. name e.g., \"Scout Route\". description Details. status e.g., In Progress. priority Urgency. progress AI-generated. self_assignment Yes/No; limits (1-X users). lead_id User. squad_id Group. schedule JSONB: <code>{\"start\": \"\", \"end\": \"\", \"duration\": \"\", \"flexible\": true, \"timezone\": \"UTC\"}</code>. <p>Structure: Sub-hierarchical; supports pre-assign, multiples, AI-suggested signup/scheduling.</p>"},{"location":"developer/architecture/#objective-categories","title":"Objective Categories","text":"Attribute Description id UUID, primary key. guild_id UUID, foreign key. name e.g., Economy. description Details. <p>Structure: Independent for outcome grouping.</p>"},{"location":"developer/architecture/#features","title":"Features","text":""},{"location":"developer/architecture/#user-authentication","title":"User Authentication","text":"<ul> <li>Credentials/Password/SSO; PIN for voice.</li> <li>MFA (web/client).</li> <li>Auto-Deactivation: Failed attempts.</li> <li>Auto-Logoff: Inactivity.</li> </ul>"},{"location":"developer/architecture/#user-authorization","title":"User Authorization","text":"<ul> <li>Limited by rank + overrides.</li> <li>Visibility: Configurable (default rank-or-lower; <code>classified</code> section restricted).</li> </ul>"},{"location":"developer/architecture/#user-actions","title":"User Actions","text":""},{"location":"developer/architecture/#administrative","title":"Administrative","text":"<ul> <li>Admin users/ranks/preferences/objectives/tasks.</li> <li>Assign/remove: Ranks, preferences, tasks/squads.</li> <li>Update priorities/statuses.</li> <li>Manage access levels/permissions.</li> <li>AI prompt mods.</li> </ul>"},{"location":"developer/architecture/#self-managed","title":"Self-Managed","text":"<ul> <li>Profile updates.</li> <li>Auth/logoff.</li> <li>Signup/withdraw tasks (limits).</li> <li>Update task statuses.</li> <li>Declare availability/online.</li> <li>Retrieve filtered lists (AI-assisted).</li> </ul>"},{"location":"developer/architecture/#user-interfaces","title":"User Interfaces","text":"<ul> <li>Web: Mobile-friendly PWA (React).</li> <li>Client Overlay: Transparent for game.</li> <li>Voice: Wingman-AI skill (seamless).</li> </ul>"},{"location":"developer/architecture/#development-sequence","title":"Development Sequence","text":"<ol> <li>Wingman-AI PoC (Weeks 1-4): Skill for objectives/tasks/progress/scheduling; test with community (generated code ready).</li> <li>Auth &amp; Security (Weeks 5-6): Cognito/PIN/MFA, access levels.</li> <li>Entities &amp; Database (Weeks 7-8): PostgreSQL \"sphereconnect\", single schema with guild_id.</li> <li>Admin/Self Actions (Weeks 9-10): CRUD with defaults.</li> <li>Overlay UI &amp; Notifications (Weeks 11-12): React PWA, AWS SNS.</li> <li>Analytics (Week 13): AI debriefs.</li> </ol>"},{"location":"developer/architecture/#repository-notes","title":"Repository Notes","text":"<ul> <li>License: Apache 2.0 (<code>LICENSE</code>).</li> <li>Sensitive Files: Keep <code>docs/</code>, <code>.env</code>, <code>.env.local</code>, <code>env/</code>, <code>__pycache__/</code>, <code>.vscode/</code> in <code>.gitignore</code>; history clean.</li> <li>Credentials: Use env vars (e.g., DB_PASS in .env.local).</li> <li>Pre-Commit Hook: Block sensitive files.</li> </ul>"},{"location":"developer/contribution/","title":"Contribution Guidelines","text":"<p>Welcome to SphereConnect! This document outlines the processes and standards for contributing to the project.</p>"},{"location":"developer/contribution/#code-of-conduct","title":"Code of Conduct","text":""},{"location":"developer/contribution/#our-standards","title":"Our Standards","text":"<ul> <li>Respectful Communication: Be considerate and respectful in all interactions</li> <li>Inclusive Environment: Welcome contributors from all backgrounds and skill levels</li> <li>Constructive Feedback: Provide helpful, actionable feedback on contributions</li> <li>Professionalism: Maintain professional standards in code, documentation, and discussions</li> </ul>"},{"location":"developer/contribution/#unacceptable-behavior","title":"Unacceptable Behavior","text":"<ul> <li>Harassment or discriminatory language</li> <li>Personal attacks or insults</li> <li>Trolling or disruptive comments</li> <li>Sharing private information without consent</li> </ul>"},{"location":"developer/contribution/#getting-started","title":"Getting Started","text":""},{"location":"developer/contribution/#development-environment-setup","title":"Development Environment Setup","text":"<ol> <li> <p>Fork and Clone <pre><code>git clone https://github.com/your-username/sphereconnect.git\ncd sphereconnect\n</code></pre></p> </li> <li> <p>Set Up Development Environment <pre><code># Follow installation guide\npython scripts/db_init.py\npython scripts/test_data.py\n</code></pre></p> </li> <li> <p>Create Feature Branch <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"developer/contribution/#development-workflow","title":"Development Workflow","text":"<ol> <li>Choose an Issue: Pick from GitHub issues or propose new features</li> <li>Create Branch: Use descriptive branch names</li> <li>Make Changes: Follow coding standards</li> <li>Write Tests: Ensure test coverage</li> <li>Update Documentation: Keep docs current</li> <li>Submit PR: Follow PR template</li> </ol>"},{"location":"developer/contribution/#coding-standards","title":"Coding Standards","text":""},{"location":"developer/contribution/#python-code-style","title":"Python Code Style","text":"<p>Follow PEP 8 with these additions:</p> <pre><code># Use type hints\ndef create_objective(name: str, guild_id: UUID) -&gt; Objective:\n    pass\n\n# Use descriptive variable names\nuser_objective_assignments = []  # Not: uoa = []\n\n# Use docstrings\ndef authenticate_user(username: str, password: str) -&gt; bool:\n    \"\"\"Authenticate a user with credentials.\n\n    Args:\n        username: User's login name\n        password: User's password\n\n    Returns:\n        True if authentication successful, False otherwise\n\n    Raises:\n        ValueError: If username or password is invalid\n    \"\"\"\n    pass\n</code></pre>"},{"location":"developer/contribution/#commit-message-format","title":"Commit Message Format","text":"<pre><code>type(scope): description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>test</code>: Test additions/modifications - <code>chore</code>: Maintenance tasks</p> <p>Examples: <pre><code>feat(auth): add TOTP MFA support\n\nfix(api): resolve objective creation race condition\n\ndocs(setup): update installation instructions for Ubuntu 22.04\n</code></pre></p>"},{"location":"developer/contribution/#branch-naming","title":"Branch Naming","text":"<pre><code>feature/description-of-feature\nbugfix/issue-description\nhotfix/critical-fix\ndocs/update-section\n</code></pre>"},{"location":"developer/contribution/#testing-requirements","title":"Testing Requirements","text":""},{"location":"developer/contribution/#unit-tests","title":"Unit Tests","text":"<ul> <li>Coverage: Minimum 80% code coverage</li> <li>Isolation: Tests should not depend on external services</li> <li>Mocking: Use appropriate mocking for external dependencies</li> </ul> <pre><code>import pytest\nfrom unittest.mock import Mock, patch\n\ndef test_create_objective_success(client, test_guild):\n    \"\"\"Test successful objective creation.\"\"\"\n    data = {\n        \"name\": \"Test Objective\",\n        \"guild_id\": str(test_guild.id)\n    }\n\n    response = client.post(\"/api/objectives\", json=data)\n    assert response.status_code == 201\n    assert response.json()[\"name\"] == \"Test Objective\"\n</code></pre>"},{"location":"developer/contribution/#integration-tests","title":"Integration Tests","text":"<ul> <li>API Endpoints: Test complete request/response cycles</li> <li>Database Operations: Verify data persistence and relationships</li> <li>Authentication: Test protected endpoints</li> </ul>"},{"location":"developer/contribution/#performance-tests","title":"Performance Tests","text":"<ul> <li>Response Times: API calls should respond within 2 seconds</li> <li>Memory Usage: Monitor for memory leaks</li> <li>Database Queries: Optimize slow queries</li> </ul>"},{"location":"developer/contribution/#pull-request-process","title":"Pull Request Process","text":""},{"location":"developer/contribution/#pr-template","title":"PR Template","text":"<pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests added/updated\n- [ ] Manual testing completed\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Documentation updated\n- [ ] Tests pass\n- [ ] No breaking changes\n</code></pre>"},{"location":"developer/contribution/#review-process","title":"Review Process","text":"<ol> <li>Automated Checks: CI/CD runs tests and linting</li> <li>Peer Review: At least one maintainer review required</li> <li>Approval: Maintainers approve based on quality and standards</li> <li>Merge: Squash merge with descriptive commit message</li> </ol>"},{"location":"developer/contribution/#review-guidelines","title":"Review Guidelines","text":"<p>Reviewers should check: - Code quality and style compliance - Test coverage and correctness - Documentation updates - Security implications - Performance impact - Breaking changes</p> <p>Authors should: - Respond to review comments promptly - Make requested changes - Re-request review after updates</p>"},{"location":"developer/contribution/#documentation-standards","title":"Documentation Standards","text":""},{"location":"developer/contribution/#code-documentation","title":"Code Documentation","text":"<pre><code>class ObjectiveService:\n    \"\"\"Service for managing objectives.\n\n    This service handles all objective-related business logic\n    including creation, updates, and progress tracking.\n    \"\"\"\n\n    def create_objective(self, data: dict) -&gt; Objective:\n        \"\"\"Create a new objective.\n\n        Args:\n            data: Objective creation data\n\n        Returns:\n            Created objective instance\n\n        Raises:\n            ValidationError: If data is invalid\n            PermissionError: If user lacks permissions\n        \"\"\"\n        pass\n</code></pre>"},{"location":"developer/contribution/#api-documentation","title":"API Documentation","text":"<p>Use OpenAPI/Swagger standards:</p> <pre><code>@app.post(\"/api/objectives\")\nasync def create_objective(\n    objective: ObjectiveCreate,\n    current_user: User = Depends(get_current_user)\n):\n    \"\"\"Create a new objective.\n\n    This endpoint allows authorized users to create objectives\n    within their guild.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"developer/contribution/#readme-updates","title":"README Updates","text":"<ul> <li>Update installation instructions for new dependencies</li> <li>Document new features and configuration options</li> <li>Update troubleshooting section for common issues</li> </ul>"},{"location":"developer/contribution/#security-considerations","title":"Security Considerations","text":""},{"location":"developer/contribution/#code-security","title":"Code Security","text":"<ul> <li>Input Validation: Always validate and sanitize inputs</li> <li>SQL Injection: Use parameterized queries or ORMs</li> <li>XSS Prevention: Escape output in templates</li> <li>CSRF Protection: Implement CSRF tokens for forms</li> </ul>"},{"location":"developer/contribution/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>JWT Security: Use secure secrets and proper expiration</li> <li>Password Policies: Enforce strong password requirements</li> <li>Session Management: Implement proper session handling</li> <li>Rate Limiting: Protect against brute force attacks</li> </ul>"},{"location":"developer/contribution/#data-protection","title":"Data Protection","text":"<ul> <li>Encryption: Encrypt sensitive data at rest</li> <li>Access Control: Implement proper authorization checks</li> <li>Audit Logging: Log security-relevant events</li> <li>Data Sanitization: Clean data before storage/display</li> </ul>"},{"location":"developer/contribution/#performance-guidelines","title":"Performance Guidelines","text":""},{"location":"developer/contribution/#database-optimization","title":"Database Optimization","text":"<ul> <li>Indexing: Add appropriate indexes for query patterns</li> <li>Query Efficiency: Avoid N+1 queries</li> <li>Connection Pooling: Use connection pools properly</li> <li>Caching: Implement caching for frequently accessed data</li> </ul>"},{"location":"developer/contribution/#code-performance","title":"Code Performance","text":"<ul> <li>Algorithm Complexity: Use efficient algorithms</li> <li>Memory Management: Avoid memory leaks</li> <li>Async Operations: Use async for I/O operations</li> <li>Profiling: Profile code for bottlenecks</li> </ul>"},{"location":"developer/contribution/#release-process","title":"Release Process","text":""},{"location":"developer/contribution/#version-numbering","title":"Version Numbering","text":"<p>Follow Semantic Versioning (MAJOR.MINOR.PATCH):</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features (backward compatible)</li> <li>PATCH: Bug fixes (backward compatible)</li> </ul>"},{"location":"developer/contribution/#release-checklist","title":"Release Checklist","text":"<ul> <li> All tests pass</li> <li> Documentation updated</li> <li> Changelog updated</li> <li> Security review completed</li> <li> Performance benchmarks met</li> <li> Deployment tested</li> <li> Rollback plan prepared</li> </ul>"},{"location":"developer/contribution/#deployment","title":"Deployment","text":"<ol> <li>Staging: Deploy to staging environment</li> <li>Testing: Run integration tests on staging</li> <li>Production: Deploy to production with monitoring</li> <li>Verification: Verify functionality and performance</li> <li>Monitoring: Monitor for issues post-deployment</li> </ol>"},{"location":"developer/contribution/#communication","title":"Communication","text":""},{"location":"developer/contribution/#issue-tracking","title":"Issue Tracking","text":"<ul> <li>Bug Reports: Use GitHub issues with bug template</li> <li>Feature Requests: Use GitHub issues with feature template</li> <li>Discussions: Use GitHub discussions for general topics</li> </ul>"},{"location":"developer/contribution/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: For bugs and feature requests</li> <li>Pull Request Comments: For code review discussions</li> <li>Discord/Forum: For community discussions</li> <li>Email: For security issues (security@project.com)</li> </ul>"},{"location":"developer/contribution/#recognition","title":"Recognition","text":""},{"location":"developer/contribution/#contributor-recognition","title":"Contributor Recognition","text":"<ul> <li>Contributors File: Listed in CONTRIBUTORS.md</li> <li>Changelog: Credit in release notes</li> <li>Hall of Fame: Featured contributors</li> <li>Swag: Project-branded items for major contributors</li> </ul>"},{"location":"developer/contribution/#rewards-system","title":"Rewards System","text":"<ul> <li>First Contribution: Welcome message and swag</li> <li>Regular Contributor: Monthly recognition</li> <li>Top Contributor: Annual awards</li> <li>Maintainer: Core team recognition</li> </ul>"},{"location":"developer/contribution/#getting-help","title":"Getting Help","text":""},{"location":"developer/contribution/#resources","title":"Resources","text":"<ul> <li>Documentation: Comprehensive docs at docs/</li> <li>Examples: Code examples in examples/</li> <li>Community: Forums and Discord</li> <li>Mentorship: Pair programming sessions</li> </ul>"},{"location":"developer/contribution/#support","title":"Support","text":"<ul> <li>New Contributors: Dedicated onboarding support</li> <li>Technical Issues: Technical support channels</li> <li>General Questions: Community forums</li> <li>Urgent Issues: Direct maintainer contact</li> </ul> <p>Thank you for contributing to SphereConnect! Your efforts help make guild coordination in Star Citizen more effective and enjoyable.</p>"},{"location":"developer/database-schema/","title":"Database Schema Documentation","text":"<p>This document provides a comprehensive overview of the SphereConnect PostgreSQL database schema, including all tables, relationships, indexes, and constraints.</p>"},{"location":"developer/database-schema/#overview","title":"Overview","text":"<p>SphereConnect uses PostgreSQL as its primary database with a multitenant architecture. All tables include <code>guild_id</code> for data isolation between guilds.</p>"},{"location":"developer/database-schema/#core-tables","title":"Core Tables","text":""},{"location":"developer/database-schema/#guilds","title":"Guilds","text":"<p>The root table for multitenant data isolation.</p> <pre><code>CREATE TABLE guilds (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    name TEXT NOT NULL,\n    description TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Indexes\nCREATE UNIQUE INDEX idx_guilds_name ON guilds(name);\nCREATE INDEX idx_guilds_created_at ON guilds(created_at);\n</code></pre> <p>Relationships: - Parent to: users, ai_commanders, squads, ranks, access_levels, objectives, objective_categories, tasks</p>"},{"location":"developer/database-schema/#users","title":"Users","text":"<p>User accounts with authentication and profile information.</p> <pre><code>CREATE TABLE users (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    guild_id UUID NOT NULL,\n    name TEXT NOT NULL,\n    phonetic TEXT,\n    availability TEXT DEFAULT 'offline' CHECK (availability IN ('online', 'busy', 'offline', 'in_game')),\n    rank UUID,\n    preferences TEXT[] DEFAULT '{}',\n    password TEXT,\n    pin TEXT,\n    squad_id UUID,\n    -- Security fields\n    last_login TIMESTAMP WITH TIME ZONE,\n    failed_attempts INTEGER DEFAULT 0,\n    locked_until TIMESTAMP WITH TIME ZONE,\n    totp_secret VARCHAR(32),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    -- Foreign keys\n    FOREIGN KEY (guild_id) REFERENCES guilds(id) ON DELETE CASCADE,\n    FOREIGN KEY (rank) REFERENCES ranks(id),\n    FOREIGN KEY (squad_id) REFERENCES squads(id)\n);\n\n-- Indexes\nCREATE UNIQUE INDEX idx_users_guild_name ON users(guild_id, name);\nCREATE INDEX idx_users_guild_id ON users(guild_id);\nCREATE INDEX idx_users_rank ON users(rank);\nCREATE INDEX idx_users_squad_id ON users(squad_id);\nCREATE INDEX idx_users_availability ON users(availability);\nCREATE INDEX idx_users_last_login ON users(last_login);\n</code></pre>"},{"location":"developer/database-schema/#ai-commanders","title":"AI Commanders","text":"<p>Customizable AI personalities for voice interaction.</p> <pre><code>CREATE TABLE ai_commanders (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    guild_id UUID NOT NULL,\n    name TEXT NOT NULL DEFAULT 'UEE Commander',\n    phonetic TEXT,\n    system_prompt TEXT NOT NULL,\n    user_prompt TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    FOREIGN KEY (guild_id) REFERENCES guilds(id) ON DELETE CASCADE\n);\n\n-- Indexes\nCREATE UNIQUE INDEX idx_ai_commanders_guild ON ai_commanders(guild_id);\nCREATE INDEX idx_ai_commanders_name ON ai_commanders(name);\n</code></pre>"},{"location":"developer/database-schema/#squads","title":"Squads","text":"<p>Dynamic team formations for coordinated operations.</p> <pre><code>CREATE TABLE squads (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    guild_id UUID NOT NULL,\n    name TEXT NOT NULL,\n    squad_lead UUID,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    FOREIGN KEY (guild_id) REFERENCES guilds(id) ON DELETE CASCADE,\n    FOREIGN KEY (squad_lead) REFERENCES users(id)\n);\n\n-- Indexes\nCREATE UNIQUE INDEX idx_squads_guild_name ON squads(guild_id, name);\nCREATE INDEX idx_squads_guild_id ON squads(guild_id);\nCREATE INDEX idx_squads_lead ON squads(squad_lead);\n</code></pre>"},{"location":"developer/database-schema/#ranks","title":"Ranks","text":"<p>Hierarchical role system with access control.</p> <pre><code>CREATE TABLE ranks (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    guild_id UUID NOT NULL,\n    name TEXT NOT NULL,\n    phonetic TEXT,\n    access_levels UUID[] DEFAULT '{}',\n    hierarchy_level INTEGER NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    FOREIGN KEY (guild_id) REFERENCES guilds(id) ON DELETE CASCADE\n);\n\n-- Indexes\nCREATE UNIQUE INDEX idx_ranks_guild_name ON ranks(guild_id, name);\nCREATE UNIQUE INDEX idx_ranks_guild_hierarchy ON ranks(guild_id, hierarchy_level);\nCREATE INDEX idx_ranks_guild_id ON ranks(guild_id);\nCREATE INDEX idx_ranks_hierarchy ON ranks(hierarchy_level);\n</code></pre>"},{"location":"developer/database-schema/#access-levels","title":"Access Levels","text":"<p>Granular permissions for different operations.</p> <pre><code>CREATE TABLE access_levels (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    guild_id UUID NOT NULL,\n    name TEXT NOT NULL,\n    user_actions TEXT[] DEFAULT '{}',\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    FOREIGN KEY (guild_id) REFERENCES guilds(id) ON DELETE CASCADE\n);\n\n-- Indexes\nCREATE UNIQUE INDEX idx_access_levels_guild_name ON access_levels(guild_id, name);\nCREATE INDEX idx_access_levels_guild_id ON access_levels(guild_id);\n</code></pre>"},{"location":"developer/database-schema/#mission-management-tables","title":"Mission Management Tables","text":""},{"location":"developer/database-schema/#objectives","title":"Objectives","text":"<p>High-level mission definitions with structured descriptions.</p> <pre><code>CREATE TABLE objectives (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    guild_id UUID NOT NULL,\n    name TEXT NOT NULL,\n    description JSONB DEFAULT '{}',\n    preferences TEXT[] DEFAULT '{}',\n    categories UUID[] DEFAULT '{}',\n    priority TEXT DEFAULT 'medium' CHECK (priority IN ('critical', 'high', 'medium', 'low')),\n    applicable_rank TEXT,\n    progress REAL DEFAULT 0.0 CHECK (progress &gt;= 0.0 AND progress &lt;= 100.0),\n    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'completed', 'cancelled', 'on_hold')),\n    lead_id UUID,\n    squad_id UUID,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    FOREIGN KEY (guild_id) REFERENCES guilds(id) ON DELETE CASCADE,\n    FOREIGN KEY (lead_id) REFERENCES users(id),\n    FOREIGN KEY (squad_id) REFERENCES squads(id)\n);\n\n-- Indexes\nCREATE INDEX idx_objectives_guild_id ON objectives(guild_id);\nCREATE INDEX idx_objectives_status ON objectives(status);\nCREATE INDEX idx_objectives_priority ON objectives(priority);\nCREATE INDEX idx_objectives_lead_id ON objectives(lead_id);\nCREATE INDEX idx_objectives_squad_id ON objectives(squad_id);\nCREATE INDEX idx_objectives_categories ON objectives USING GIN(categories);\nCREATE INDEX idx_objectives_description ON objectives USING GIN(description);\nCREATE INDEX idx_objectives_created_at ON objectives(created_at);\n</code></pre>"},{"location":"developer/database-schema/#tasks","title":"Tasks","text":"<p>Specific actionable items within objectives.</p> <pre><code>CREATE TABLE tasks (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    objective_id UUID NOT NULL,\n    guild_id UUID NOT NULL,\n    name TEXT NOT NULL,\n    description TEXT,\n    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'cancelled', 'on_hold')),\n    priority TEXT DEFAULT 'medium' CHECK (priority IN ('critical', 'high', 'medium', 'low')),\n    progress REAL DEFAULT 0.0 CHECK (progress &gt;= 0.0 AND progress &lt;= 100.0),\n    self_assignment BOOLEAN DEFAULT true,\n    lead_id UUID,\n    squad_id UUID,\n    schedule JSONB DEFAULT '{}',\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    FOREIGN KEY (objective_id) REFERENCES objectives(id) ON DELETE CASCADE,\n    FOREIGN KEY (guild_id) REFERENCES guilds(id) ON DELETE CASCADE,\n    FOREIGN KEY (lead_id) REFERENCES users(id),\n    FOREIGN KEY (squad_id) REFERENCES squads(id)\n);\n\n-- Indexes\nCREATE INDEX idx_tasks_objective_id ON tasks(objective_id);\nCREATE INDEX idx_tasks_guild_id ON tasks(guild_id);\nCREATE INDEX idx_tasks_status ON tasks(status);\nCREATE INDEX idx_tasks_priority ON tasks(priority);\nCREATE INDEX idx_tasks_lead_id ON tasks(lead_id);\nCREATE INDEX idx_tasks_squad_id ON tasks(squad_id);\nCREATE INDEX idx_tasks_schedule ON tasks USING GIN(schedule);\nCREATE INDEX idx_tasks_created_at ON tasks(created_at);\n</code></pre>"},{"location":"developer/database-schema/#objective-categories","title":"Objective Categories","text":"<p>Grouping system for objectives.</p> <pre><code>CREATE TABLE objective_categories (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    guild_id UUID NOT NULL,\n    name TEXT NOT NULL,\n    description TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    FOREIGN KEY (guild_id) REFERENCES guilds(id) ON DELETE CASCADE\n);\n\n-- Indexes\nCREATE UNIQUE INDEX idx_objective_categories_guild_name ON objective_categories(guild_id, name);\nCREATE INDEX idx_objective_categories_guild_id ON objective_categories(guild_id);\n</code></pre>"},{"location":"developer/database-schema/#objective-categories-junction","title":"Objective Categories Junction","text":"<p>Many-to-many relationship between objectives and categories.</p> <pre><code>CREATE TABLE objective_categories_junction (\n    objective_id UUID NOT NULL,\n    category_id UUID NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    PRIMARY KEY (objective_id, category_id),\n    FOREIGN KEY (objective_id) REFERENCES objectives(id) ON DELETE CASCADE,\n    FOREIGN KEY (category_id) REFERENCES objective_categories(id) ON DELETE CASCADE\n);\n\n-- Indexes\nCREATE INDEX idx_obj_cat_junction_objective ON objective_categories_junction(objective_id);\nCREATE INDEX idx_obj_cat_junction_category ON objective_categories_junction(category_id);\n</code></pre>"},{"location":"developer/database-schema/#session-management","title":"Session Management","text":""},{"location":"developer/database-schema/#user-sessions","title":"User Sessions","text":"<p>Tracks active user sessions for security and analytics.</p> <pre><code>CREATE TABLE user_sessions (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    user_id UUID NOT NULL,\n    token_hash VARCHAR(255) NOT NULL,\n    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    ip_address VARCHAR(45),\n    user_agent TEXT,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n\n-- Indexes\nCREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);\nCREATE INDEX idx_user_sessions_expires_at ON user_sessions(expires_at);\nCREATE INDEX idx_user_sessions_token_hash ON user_sessions(token_hash);\n</code></pre>"},{"location":"developer/database-schema/#jsonb-structure-definitions","title":"JSONB Structure Definitions","text":""},{"location":"developer/database-schema/#objective-description-schema","title":"Objective Description Schema","text":"<pre><code>{\n  \"brief\": \"High-level objective overview visible to all ranks\",\n  \"tactical\": \"Detailed execution plan for officers and NCOs\",\n  \"classified\": \"Sensitive information restricted to officers only\",\n  \"metrics\": {\n    \"custom_metric_1\": 0,\n    \"custom_metric_2\": 0,\n    \"target_value\": 100,\n    \"current_value\": 0\n  }\n}\n</code></pre>"},{"location":"developer/database-schema/#task-schedule-schema","title":"Task Schedule Schema","text":"<pre><code>{\n  \"start\": \"2024-01-15T14:00:00Z\",\n  \"end\": \"2024-01-15T16:00:00Z\",\n  \"duration\": 120,\n  \"flexible\": false,\n  \"timezone\": \"UTC\"\n}\n</code></pre>"},{"location":"developer/database-schema/#constraints-and-validation","title":"Constraints and Validation","text":""},{"location":"developer/database-schema/#check-constraints","title":"Check Constraints","text":"<pre><code>-- User availability\nALTER TABLE users ADD CONSTRAINT chk_users_availability\nCHECK (availability IN ('online', 'busy', 'offline', 'in_game'));\n\n-- Objective priority\nALTER TABLE objectives ADD CONSTRAINT chk_objectives_priority\nCHECK (priority IN ('critical', 'high', 'medium', 'low'));\n\n-- Objective status\nALTER TABLE objectives ADD CONSTRAINT chk_objectives_status\nCHECK (status IN ('active', 'completed', 'cancelled', 'on_hold'));\n\n-- Task status\nALTER TABLE tasks ADD CONSTRAINT chk_tasks_status\nCHECK (status IN ('pending', 'in_progress', 'completed', 'cancelled', 'on_hold'));\n\n-- Progress ranges\nALTER TABLE objectives ADD CONSTRAINT chk_objectives_progress\nCHECK (progress &gt;= 0.0 AND progress &lt;= 100.0);\n\nALTER TABLE tasks ADD CONSTRAINT chk_tasks_progress\nCHECK (progress &gt;= 0.0 AND progress &lt;= 100.0);\n</code></pre>"},{"location":"developer/database-schema/#unique-constraints","title":"Unique Constraints","text":"<pre><code>-- Guild-scoped unique names\nALTER TABLE guilds ADD CONSTRAINT uk_guilds_name UNIQUE (name);\nALTER TABLE users ADD CONSTRAINT uk_users_guild_name UNIQUE (guild_id, name);\nALTER TABLE ai_commanders ADD CONSTRAINT uk_ai_commanders_guild UNIQUE (guild_id);\nALTER TABLE squads ADD CONSTRAINT uk_squads_guild_name UNIQUE (guild_id, name);\nALTER TABLE ranks ADD CONSTRAINT uk_ranks_guild_name UNIQUE (guild_id, name);\nALTER TABLE ranks ADD CONSTRAINT uk_ranks_guild_hierarchy UNIQUE (guild_id, hierarchy_level);\nALTER TABLE access_levels ADD CONSTRAINT uk_access_levels_guild_name UNIQUE (guild_id, name);\nALTER TABLE objective_categories ADD CONSTRAINT uk_objective_categories_guild_name UNIQUE (guild_id, name);\n</code></pre>"},{"location":"developer/database-schema/#performance-optimization","title":"Performance Optimization","text":""},{"location":"developer/database-schema/#partitioning-strategy","title":"Partitioning Strategy","text":"<p>For high-traffic guilds, consider partitioning large tables:</p> <pre><code>-- Partition objectives by guild (if needed for scale)\nCREATE TABLE objectives_y2024 PARTITION OF objectives\nFOR VALUES FROM ('2024-01-01') TO ('2025-01-01');\n\n-- Partition tasks by objective\nCREATE TABLE tasks_obj_001 PARTITION OF tasks\nFOR VALUES FROM ('550e8400-e29b-41d4-a716-446655440001')\nTO ('550e8400-e29b-41d4-a716-446655440002');\n</code></pre>"},{"location":"developer/database-schema/#index-strategy","title":"Index Strategy","text":"<ul> <li>Guild ID indexes on all tables for tenant isolation</li> <li>GIN indexes on JSONB columns for efficient querying</li> <li>Partial indexes for common filters</li> <li>Composite indexes for frequent query patterns</li> </ul>"},{"location":"developer/database-schema/#query-optimization","title":"Query Optimization","text":"<p>Common query patterns and their optimized indexes:</p> <pre><code>-- Objectives by guild and status\nCREATE INDEX idx_objectives_guild_status ON objectives(guild_id, status);\n\n-- Tasks by objective and status\nCREATE INDEX idx_tasks_objective_status ON tasks(objective_id, status);\n\n-- Users by guild and rank\nCREATE INDEX idx_users_guild_rank ON users(guild_id, rank);\n</code></pre>"},{"location":"developer/database-schema/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"developer/database-schema/#logical-backups","title":"Logical Backups","text":"<pre><code>-- Full database backup\npg_dump -U sphereconnect -h localhost sphereconnect &gt; sphereconnect_backup.sql\n\n-- Schema-only backup\npg_dump -U sphereconnect -h localhost --schema-only sphereconnect &gt; schema_backup.sql\n\n-- Data-only backup\npg_dump -U sphereconnect -h localhost --data-only sphereconnect &gt; data_backup.sql\n</code></pre>"},{"location":"developer/database-schema/#point-in-time-recovery","title":"Point-in-Time Recovery","text":"<p>Enable WAL archiving for PITR:</p> <pre><code>-- postgresql.conf\nwal_level = replica\narchive_mode = on\narchive_command = 'cp %p /var/lib/postgresql/archive/%f'\n</code></pre>"},{"location":"developer/database-schema/#continuous-archiving","title":"Continuous Archiving","text":"<pre><code># Base backup\npg_basebackup -U sphereconnect -h localhost -D /backup/base -Ft -z -P\n\n# Restore from backup\npg_restore -U sphereconnect -h localhost -d sphereconnect /backup/base.tar.gz\n</code></pre>"},{"location":"developer/database-schema/#migration-strategy","title":"Migration Strategy","text":""},{"location":"developer/database-schema/#schema-migrations","title":"Schema Migrations","text":"<p>Use tools like Alembic or Flyway for schema versioning:</p> <pre><code># Alembic migration example\ndef upgrade():\n    op.create_table('new_table',\n        sa.Column('id', sa.UUID(), nullable=False),\n        sa.Column('guild_id', sa.UUID(), nullable=False),\n        sa.ForeignKeyConstraint(['guild_id'], ['guilds.id'], ondelete='CASCADE'),\n        sa.PrimaryKeyConstraint('id')\n    )\n\ndef downgrade():\n    op.drop_table('new_table')\n</code></pre>"},{"location":"developer/database-schema/#data-migrations","title":"Data Migrations","text":"<p>Handle data transformations during schema changes:</p> <pre><code>def upgrade():\n    # Migrate existing data\n    op.execute(\"\"\"\n        UPDATE objectives\n        SET description = jsonb_build_object(\n            'brief', description-&gt;&gt;'brief',\n            'tactical', description-&gt;&gt;'tactical',\n            'metrics', '{}'::jsonb\n        )\n        WHERE description IS NOT NULL\n    \"\"\")\n</code></pre>"},{"location":"developer/database-schema/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"developer/database-schema/#table-statistics","title":"Table Statistics","text":"<pre><code>-- Update table statistics\nANALYZE VERBOSE;\n\n-- View table bloat\nSELECT schemaname, tablename, n_dead_tup, n_live_tup\nFROM pg_stat_user_tables\nORDER BY n_dead_tup DESC;\n</code></pre>"},{"location":"developer/database-schema/#index-maintenance","title":"Index Maintenance","text":"<pre><code>-- Reindex specific index\nREINDEX INDEX idx_objectives_guild_id;\n\n-- Reindex all indexes in database\nREINDEX DATABASE sphereconnect;\n</code></pre>"},{"location":"developer/database-schema/#vacuum-operations","title":"Vacuum Operations","text":"<pre><code>-- Vacuum specific table\nVACUUM (VERBOSE, ANALYZE) objectives;\n\n-- Auto-vacuum settings in postgresql.conf\nautovacuum = on\nautovacuum_max_workers = 3\nautovacuum_naptime = 20s\n</code></pre> <p>This schema provides a solid foundation for the SphereConnect application with proper indexing, constraints, and scalability considerations.</p>"},{"location":"developer/testing/","title":"Testing Guide","text":"<p>This guide covers the testing strategy and practices for SphereConnect, ensuring code quality and reliability.</p>"},{"location":"developer/testing/#testing-overview","title":"Testing Overview","text":"<p>SphereConnect uses pytest for comprehensive testing with a focus on unit tests, integration tests, and performance validation. Our testing strategy emphasizes:</p> <ul> <li>Fast feedback through automated testing</li> <li>Code coverage tracking and reporting</li> <li>Mocked dependencies for reliable testing</li> <li>Documentation integration with MkDocs</li> </ul>"},{"location":"developer/testing/#current-test-structure","title":"Current Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 conftest.py              # Shared fixtures and configuration\n\u251c\u2500\u2500 test_wingman_skill.py    # Wingman-AI core functionality tests\n\u251c\u2500\u2500 test_standalone.py       # Performance and standalone tests\n\u251c\u2500\u2500 test_auth.py            # Authentication system tests\n\u251c\u2500\u2500 test_data.py            # Database operations tests\n\u2514\u2500\u2500 test_performance.py     # Performance benchmarking tests\n</code></pre>"},{"location":"developer/testing/#quick-start","title":"Quick Start","text":""},{"location":"developer/testing/#running-tests","title":"Running Tests","text":"<pre><code># Install development dependencies\npip install -r requirements-dev.txt\n\n# Run all tests\npytest\n\n# Run with coverage\npytest --cov=app --cov-report=html\n\n# Run specific test file\npytest tests/test_wingman_skill.py -v\n\n# Run performance tests only\npytest tests/test_performance.py\n</code></pre>"},{"location":"developer/testing/#test-coverage","title":"Test Coverage","text":"<p>View coverage reports at: <code>htmlcov/index.html</code> (generated after running tests with <code>--cov-report=html</code>)</p>"},{"location":"developer/testing/#unit-testing","title":"Unit Testing","text":""},{"location":"developer/testing/#test-structure","title":"Test Structure","text":"<p>Tests are organized in the <code>tests/</code> directory:</p> <pre><code>tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 conftest.py              # Pytest fixtures and configuration\n\u251c\u2500\u2500 test_auth.py            # Authentication tests\n\u251c\u2500\u2500 test_data.py            # Data operations tests\n\u251c\u2500\u2500 test_performance.py     # Performance tests\n\u251c\u2500\u2500 test_standalone.py      # Standalone component tests\n\u251c\u2500\u2500 test_wingman_skill.py   # Wingman-AI integration tests\n\u2514\u2500\u2500 integration/            # Integration tests\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 test_api_endpoints.py\n    \u2514\u2500\u2500 test_database_operations.py\n</code></pre>"},{"location":"developer/testing/#writing-unit-tests","title":"Writing Unit Tests","text":"<p>Use pytest with descriptive test names and docstrings:</p> <pre><code>import pytest\nfrom unittest.mock import Mock, patch\nfrom app.core.models import Objective, User\n\nclass TestObjectiveService:\n    \"\"\"Test cases for objective service operations.\"\"\"\n\n    def test_create_objective_success(self, test_guild, test_user):\n        \"\"\"Test successful objective creation with valid data.\"\"\"\n        from app.services.objective_service import ObjectiveService\n\n        service = ObjectiveService()\n        data = {\n            \"name\": \"Test Objective\",\n            \"guild_id\": test_guild.id,\n            \"lead_id\": test_user.id\n        }\n\n        objective = service.create_objective(data)\n\n        assert objective.name == \"Test Objective\"\n        assert objective.guild_id == test_guild.id\n        assert objective.lead_id == test_user.id\n        assert objective.status == \"active\"\n\n    def test_create_objective_invalid_name(self, test_guild):\n        \"\"\"Test objective creation fails with invalid name.\"\"\"\n        from app.services.objective_service import ObjectiveService\n\n        service = ObjectiveService()\n        data = {\n            \"name\": \"\",  # Invalid empty name\n            \"guild_id\": test_guild.id\n        }\n\n        with pytest.raises(ValueError, match=\"Name cannot be empty\"):\n            service.create_objective(data)\n\n    @patch('app.services.objective_service.logger')\n    def test_create_objective_logs_success(self, mock_logger, test_guild):\n        \"\"\"Test that successful creation is logged.\"\"\"\n        from app.services.objective_service import ObjectiveService\n\n        service = ObjectiveService()\n        data = {\n            \"name\": \"Logged Objective\",\n            \"guild_id\": test_guild.id\n        }\n\n        service.create_objective(data)\n\n        mock_logger.info.assert_called_with(\n            \"Objective 'Logged Objective' created successfully\"\n        )\n</code></pre>"},{"location":"developer/testing/#test-fixtures","title":"Test Fixtures","text":"<p>Common fixtures in <code>conftest.py</code>:</p> <pre><code>import pytest\nfrom app.core.models import Guild, User\nfrom app.utils.db_utils import get_db_session\n\n@pytest.fixture\ndef test_guild():\n    \"\"\"Create a test guild.\"\"\"\n    guild = Guild(name=\"Test Guild\", description=\"For testing\")\n    with get_db_session() as session:\n        session.add(guild)\n        session.commit()\n        session.refresh(guild)\n        yield guild\n        # Cleanup\n        session.delete(guild)\n        session.commit()\n\n@pytest.fixture\ndef test_user(test_guild):\n    \"\"\"Create a test user.\"\"\"\n    user = User(\n        guild_id=test_guild.id,\n        name=\"testuser\",\n        password=\"hashed_password\"\n    )\n    with get_db_session() as session:\n        session.add(user)\n        session.commit()\n        session.refresh(user)\n        yield user\n        # Cleanup\n        session.delete(user)\n        session.commit()\n</code></pre>"},{"location":"developer/testing/#mocking-external-dependencies","title":"Mocking External Dependencies","text":"<pre><code>@patch('app.services.wingman_service.WingmanAPI')\ndef test_voice_command_processing(self, mock_wingman_api, test_user):\n    \"\"\"Test voice command processing with mocked Wingman-AI.\"\"\"\n    from app.services.voice_service import VoiceService\n\n    # Setup mock\n    mock_wingman_api.return_value.process_command.return_value = {\n        \"success\": True,\n        \"response\": \"Objective created\",\n        \"command_type\": \"create_objective\"\n    }\n\n    service = VoiceService()\n    result = service.process_command(\"Create objective: Test\", test_user)\n\n    assert result[\"success\"] is True\n    assert \"Objective created\" in result[\"response\"]\n    mock_wingman_api.return_value.process_command.assert_called_once()\n</code></pre>"},{"location":"developer/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"developer/testing/#api-endpoint-testing","title":"API Endpoint Testing","text":"<p>Test complete request/response cycles:</p> <pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\n@pytest.fixture\ndef client():\n    \"\"\"Test client for API testing.\"\"\"\n    return TestClient(app)\n\nclass TestObjectivesAPI:\n    \"\"\"Integration tests for objectives API.\"\"\"\n\n    def test_create_objective_api(self, client, test_user_token):\n        \"\"\"Test objective creation via API.\"\"\"\n        headers = {\"Authorization\": f\"Bearer {test_user_token}\"}\n        data = {\n            \"name\": \"API Test Objective\",\n            \"description\": {\n                \"brief\": \"Test objective creation\",\n                \"metrics\": {\"target\": 100}\n            },\n            \"priority\": \"high\"\n        }\n\n        response = client.post(\"/api/objectives\", json=data, headers=headers)\n\n        assert response.status_code == 201\n        response_data = response.json()\n        assert response_data[\"name\"] == \"API Test Objective\"\n        assert response_data[\"priority\"] == \"high\"\n        assert \"id\" in response_data\n\n    def test_get_objectives_list(self, client, test_user_token):\n        \"\"\"Test retrieving objectives list.\"\"\"\n        headers = {\"Authorization\": f\"Bearer {test_user_token}\"}\n\n        response = client.get(\"/api/objectives\", headers=headers)\n\n        assert response.status_code == 200\n        data = response.json()\n        assert \"objectives\" in data\n        assert \"total\" in data\n        assert isinstance(data[\"objectives\"], list)\n\n    def test_unauthorized_access(self, client):\n        \"\"\"Test that unauthorized requests are rejected.\"\"\"\n        data = {\"name\": \"Unauthorized Objective\"}\n\n        response = client.post(\"/api/objectives\", json=data)\n\n        assert response.status_code == 401\n        assert \"Not authenticated\" in response.json()[\"detail\"]\n</code></pre>"},{"location":"developer/testing/#database-integration-tests","title":"Database Integration Tests","text":"<pre><code>def test_objective_task_relationship(self, test_guild, test_user):\n    \"\"\"Test objective and task relationship integrity.\"\"\"\n    from app.core.models import Objective, Task\n\n    # Create objective\n    objective = Objective(\n        guild_id=test_guild.id,\n        name=\"Relationship Test Objective\",\n        lead_id=test_user.id\n    )\n\n    # Create task\n    task = Task(\n        objective_id=objective.id,\n        guild_id=test_guild.id,\n        name=\"Test Task\"\n    )\n\n    with get_db_session() as session:\n        session.add(objective)\n        session.add(task)\n        session.commit()\n\n        # Verify relationship\n        loaded_task = session.query(Task).filter_by(id=task.id).first()\n        assert loaded_task.objective.name == \"Relationship Test Objective\"\n\n        # Test cascade delete\n        session.delete(objective)\n        session.commit()\n\n        # Task should be deleted\n        deleted_task = session.query(Task).filter_by(id=task.id).first()\n        assert deleted_task is None\n</code></pre>"},{"location":"developer/testing/#end-to-end-testing","title":"End-to-End Testing","text":""},{"location":"developer/testing/#wingman-ai-integration-tests","title":"Wingman-AI Integration Tests","text":"<pre><code>def test_voice_to_objective_creation(self, test_guild, test_user):\n    \"\"\"Test complete voice command to objective creation flow.\"\"\"\n    from app.services.voice_service import VoiceService\n    from app.core.models import Objective\n\n    service = VoiceService()\n\n    # Simulate voice command\n    command = \"UEE Commander, create objective: Voice Test Mission\"\n    result = service.process_command(command, test_user)\n\n    assert result[\"success\"] is True\n\n    # Verify objective was created in database\n    with get_db_session() as session:\n        objective = session.query(Objective).filter_by(\n            name=\"Voice Test Mission\",\n            guild_id=test_guild.id\n        ).first()\n\n        assert objective is not None\n        assert objective.lead_id == test_user.id\n        assert objective.status == \"active\"\n</code></pre>"},{"location":"developer/testing/#user-workflow-tests","title":"User Workflow Tests","text":"<pre><code>def test_complete_user_workflow(self, client, test_user, test_user_token):\n    \"\"\"Test complete user workflow from objective creation to completion.\"\"\"\n    headers = {\"Authorization\": f\"Bearer {test_user_token}\"}\n\n    # 1. Create objective\n    objective_data = {\n        \"name\": \"Complete Workflow Test\",\n        \"description\": {\n            \"brief\": \"Test complete workflow\",\n            \"metrics\": {\"progress\": 0, \"target\": 100}\n        }\n    }\n\n    response = client.post(\"/api/objectives\", json=objective_data, headers=headers)\n    assert response.status_code == 201\n    objective_id = response.json()[\"id\"]\n\n    # 2. Create task\n    task_data = {\n        \"objective_id\": objective_id,\n        \"name\": \"Complete Task\",\n        \"description\": \"Task to complete\"\n    }\n\n    response = client.post(\"/api/tasks\", json=task_data, headers=headers)\n    assert response.status_code == 201\n    task_id = response.json()[\"id\"]\n\n    # 3. Update progress\n    progress_data = {\"progress\": 100, \"status\": \"completed\"}\n    response = client.patch(f\"/api/tasks/{task_id}\", json=progress_data, headers=headers)\n    assert response.status_code == 200\n\n    # 4. Verify objective progress updated\n    response = client.get(f\"/api/objectives/{objective_id}\", headers=headers)\n    assert response.status_code == 200\n    objective = response.json()\n    assert objective[\"progress\"] == 100.0\n</code></pre>"},{"location":"developer/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"developer/testing/#response-time-tests","title":"Response Time Tests","text":"<pre><code>import time\n\ndef test_api_response_times(self, client, test_user_token):\n    \"\"\"Test API response times are within acceptable limits.\"\"\"\n    headers = {\"Authorization\": f\"Bearer {test_user_token}\"}\n\n    start_time = time.time()\n    response = client.get(\"/api/objectives\", headers=headers)\n    end_time = time.time()\n\n    response_time = end_time - start_time\n\n    assert response.status_code == 200\n    assert response_time &lt; 2.0  # Should respond within 2 seconds\n</code></pre>"},{"location":"developer/testing/#load-testing","title":"Load Testing","text":"<pre><code>import concurrent.futures\nimport requests\n\ndef test_concurrent_objective_creation(self, test_user_token):\n    \"\"\"Test creating multiple objectives concurrently.\"\"\"\n    def create_objective(i):\n        data = {\"name\": f\"Concurrent Objective {i}\"}\n        headers = {\"Authorization\": f\"Bearer {test_user_token}\"}\n        response = requests.post(\n            \"http://localhost:8000/api/objectives\",\n            json=data,\n            headers=headers\n        )\n        return response.status_code\n\n    # Create 10 objectives concurrently\n    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n        results = list(executor.map(create_objective, range(10)))\n\n    # All should succeed\n    assert all(status == 201 for status in results)\n</code></pre>"},{"location":"developer/testing/#memory-leak-tests","title":"Memory Leak Tests","text":"<pre><code>import psutil\nimport os\n\ndef test_memory_usage_stability(self, client, test_user_token):\n    \"\"\"Test that memory usage doesn't grow indefinitely.\"\"\"\n    headers = {\"Authorization\": f\"Bearer {test_user_token}\"}\n    process = psutil.Process(os.getpid())\n\n    initial_memory = process.memory_info().rss\n\n    # Perform many operations\n    for i in range(100):\n        data = {\"name\": f\"Memory Test Objective {i}\"}\n        client.post(\"/api/objectives\", json=data, headers=headers)\n\n    final_memory = process.memory_info().rss\n    memory_growth = final_memory - initial_memory\n\n    # Memory growth should be reasonable (less than 50MB)\n    assert memory_growth &lt; 50 * 1024 * 1024\n</code></pre>"},{"location":"developer/testing/#test-automation","title":"Test Automation","text":""},{"location":"developer/testing/#cicd-integration","title":"CI/CD Integration","text":"<p>GitHub Actions workflow for automated testing:</p> <pre><code>name: Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install dependencies\n      run: |\n        pip install -r requirements.txt\n        pip install pytest pytest-cov\n\n    - name: Run tests\n      run: pytest --cov=app --cov-report=xml\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"developer/testing/#test-data-management","title":"Test Data Management","text":"<pre><code># tests/conftest.py\n@pytest.fixture(scope=\"session\", autouse=True)\ndef setup_test_database():\n    \"\"\"Set up test database with schema.\"\"\"\n    # Create test database\n    # Run migrations\n    # Load test data\n    yield\n    # Cleanup after all tests\n\n@pytest.fixture(autouse=True)\ndef clean_database():\n    \"\"\"Clean database between tests.\"\"\"\n    # Clear all tables\n    # Reset sequences\n    yield\n</code></pre>"},{"location":"developer/testing/#code-coverage","title":"Code Coverage","text":""},{"location":"developer/testing/#coverage-requirements","title":"Coverage Requirements","text":"<ul> <li>Overall Coverage: &gt;80%</li> <li>Critical Paths: &gt;90% (authentication, API endpoints)</li> <li>New Code: 100% coverage required</li> </ul>"},{"location":"developer/testing/#coverage-configuration","title":"Coverage Configuration","text":"<pre><code># pytest.ini\n[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts =\n    --strict-markers\n    --strict-config\n    --cov=app\n    --cov-report=html:htmlcov\n    --cov-report=term-missing\n    --cov-fail-under=80\n\n[coverage:run]\nsource = app\nomit =\n    */tests/*\n    */venv/*\n    */__pycache__/*\n\n[coverage:report]\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise AssertionError\n    raise NotImplementedError\n</code></pre>"},{"location":"developer/testing/#test-maintenance","title":"Test Maintenance","text":""},{"location":"developer/testing/#flaky-test-management","title":"Flaky Test Management","text":"<pre><code>@pytest.mark.flaky(reruns=3, reruns_delay=2)\ndef test_unreliable_external_api(self):\n    \"\"\"Test that may fail due to external service.\"\"\"\n    # Test implementation\n    pass\n</code></pre>"},{"location":"developer/testing/#test-organization","title":"Test Organization","text":"<ul> <li>Unit Tests: <code>tests/unit/</code></li> <li>Integration Tests: <code>tests/integration/</code></li> <li>E2E Tests: <code>tests/e2e/</code></li> <li>Performance Tests: <code>tests/performance/</code></li> </ul>"},{"location":"developer/testing/#test-naming-conventions","title":"Test Naming Conventions","text":"<ul> <li><code>test_[function_name]_[scenario]</code></li> <li><code>test_[class_name]_[method_name]_[condition]</code></li> <li>Use descriptive names that explain what is being tested</li> </ul>"},{"location":"developer/testing/#debugging-test-failures","title":"Debugging Test Failures","text":""},{"location":"developer/testing/#common-issues","title":"Common Issues","text":"<ol> <li>Database State: Tests may depend on specific database state</li> <li>Async Operations: Timing issues with async code</li> <li>External Dependencies: Network calls or external services</li> <li>Race Conditions: Concurrent test execution</li> </ol>"},{"location":"developer/testing/#debugging-tools","title":"Debugging Tools","text":"<pre><code># Add debug prints\ndef test_debug_failure(self):\n    result = some_operation()\n    print(f\"Debug: result = {result}\")  # Temporary debug\n    assert result is not None\n\n# Use pytest fixtures for debugging\n@pytest.fixture\ndef debug_session():\n    \"\"\"Fixture for debugging test sessions.\"\"\"\n    # Setup debug logging\n    # Set breakpoints\n    yield\n    # Cleanup\n</code></pre> <p>This comprehensive testing strategy ensures SphereConnect maintains high quality and reliability across all components and use cases.</p>"},{"location":"project/changelog/","title":"Changelog","text":"<p>All notable changes to SphereConnect will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"project/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"project/changelog/#added","title":"Added","text":"<ul> <li>Documentation reorganization with hierarchical structure</li> <li>MkDocs setup for automatic documentation generation</li> <li>Comprehensive API reference documentation</li> <li>Database schema documentation</li> <li>Testing guidelines and contribution standards</li> </ul>"},{"location":"project/changelog/#changed","title":"Changed","text":"<ul> <li>Restructured documentation into categorized folders (setup, user-manual, api-reference, developer, project, tools)</li> <li>Updated main README with comprehensive project overview</li> <li>Moved existing documentation to appropriate categories</li> </ul>"},{"location":"project/changelog/#fixed","title":"Fixed","text":"<ul> <li>Documentation navigation and cross-references</li> <li>API endpoint documentation consistency</li> </ul>"},{"location":"project/changelog/#100-2024-01-15","title":"[1.0.0] - 2024-01-15","text":""},{"location":"project/changelog/#added_1","title":"Added","text":"<ul> <li>Initial release of SphereConnect MVP</li> <li>Multitenant AI-assisted coordination platform for Star Citizen guilds</li> <li>Voice-driven workflows via Wingman-AI integration</li> <li>Web interface with responsive design</li> <li>RESTful API for objectives and tasks management</li> <li>PostgreSQL database with comprehensive schema</li> <li>JWT-based authentication with MFA support</li> <li>Rank-based access control system</li> <li>Real-time notifications and progress tracking</li> <li>Comprehensive test suite with 80%+ coverage</li> </ul>"},{"location":"project/changelog/#features","title":"Features","text":"<ul> <li>Voice Commands: Natural language processing for guild coordination</li> <li>Objective Management: Create, assign, and track mission objectives</li> <li>Task Management: Break down objectives into actionable tasks</li> <li>Squad Formation: Dynamic team creation and management</li> <li>Progress Tracking: Real-time metrics and completion monitoring</li> <li>Security: Enterprise-grade authentication and authorization</li> <li>Scalability: Multitenant architecture supporting multiple guilds</li> </ul>"},{"location":"project/changelog/#technical-highlights","title":"Technical Highlights","text":"<ul> <li>Performance: &lt;2s response times for voice commands</li> <li>Accuracy: 100% intent detection in testing</li> <li>Security: bcrypt password hashing, JWT tokens, rate limiting</li> <li>Database: Optimized PostgreSQL schema with proper indexing</li> <li>API: RESTful design with comprehensive error handling</li> <li>Testing: Unit, integration, and performance test coverage</li> </ul>"},{"location":"project/changelog/#090-2023-12-20","title":"[0.9.0] - 2023-12-20","text":""},{"location":"project/changelog/#added_2","title":"Added","text":"<ul> <li>Wingman-AI skill implementation with voice parsing</li> <li>Basic objective and task CRUD operations</li> <li>User authentication system</li> <li>Database models and relationships</li> <li>API endpoint scaffolding</li> <li>Initial test data generation scripts</li> </ul>"},{"location":"project/changelog/#changed_1","title":"Changed","text":"<ul> <li>Project structure reorganization</li> <li>Database schema refinements</li> <li>API design improvements</li> </ul>"},{"location":"project/changelog/#080-2023-11-15","title":"[0.8.0] - 2023-11-15","text":""},{"location":"project/changelog/#added_3","title":"Added","text":"<ul> <li>Project proposal and planning documents</li> <li>Initial system architecture design</li> <li>Requirements gathering and analysis</li> <li>Technology stack evaluation</li> </ul>"},{"location":"project/changelog/#changed_2","title":"Changed","text":"<ul> <li>MVP scope definition and prioritization</li> <li>Development timeline planning</li> </ul>"},{"location":"project/changelog/#070-2023-10-30","title":"[0.7.0] - 2023-10-30","text":""},{"location":"project/changelog/#added_4","title":"Added","text":"<ul> <li>Initial project setup and repository creation</li> <li>Basic Python/FastAPI application structure</li> <li>PostgreSQL database integration</li> <li>Git workflow and branching strategy</li> <li>Development environment configuration</li> </ul>"},{"location":"project/changelog/#infrastructure","title":"Infrastructure","text":"<ul> <li>GitHub repository setup</li> <li>CI/CD pipeline configuration</li> <li>Code quality tools (linting, formatting)</li> <li>Documentation framework setup</li> </ul>"},{"location":"project/changelog/#060-2023-10-15","title":"[0.6.0] - 2023-10-15","text":""},{"location":"project/changelog/#added_5","title":"Added","text":"<ul> <li>Comprehensive requirements specification</li> <li>MVP feature definition for Star Citizen focus</li> <li>User story development</li> <li>Acceptance criteria documentation</li> </ul>"},{"location":"project/changelog/#planning","title":"Planning","text":"<ul> <li>Development phases and milestones</li> <li>Risk assessment and mitigation strategies</li> <li>Resource allocation planning</li> <li>Success metrics definition</li> </ul>"},{"location":"project/changelog/#050-2023-09-30","title":"[0.5.0] - 2023-09-30","text":""},{"location":"project/changelog/#added_6","title":"Added","text":"<ul> <li>Project concept and vision</li> <li>Initial market research</li> <li>Competitive analysis</li> <li>Target user identification</li> </ul>"},{"location":"project/changelog/#research","title":"Research","text":"<ul> <li>Technology feasibility studies</li> <li>AI integration possibilities</li> <li>Voice recognition capabilities</li> <li>Gaming platform APIs evaluation</li> </ul>"},{"location":"project/changelog/#040-2023-09-15","title":"[0.4.0] - 2023-09-15","text":""},{"location":"project/changelog/#added_7","title":"Added","text":"<ul> <li>Repository initialization</li> <li>Basic project structure</li> <li>License selection (Apache 2.0)</li> <li>Initial documentation framework</li> </ul>"},{"location":"project/changelog/#infrastructure_1","title":"Infrastructure","text":"<ul> <li>Development environment setup</li> <li>Version control configuration</li> <li>Basic CI/CD pipeline</li> <li>Code quality standards definition</li> </ul>"},{"location":"project/changelog/#030-2023-08-30","title":"[0.3.0] - 2023-08-30","text":""},{"location":"project/changelog/#added_8","title":"Added","text":"<ul> <li>Core concept development</li> <li>Problem statement definition</li> <li>Solution architecture brainstorming</li> <li>Initial feature ideation</li> </ul>"},{"location":"project/changelog/#research_1","title":"Research","text":"<ul> <li>Gaming coordination tool analysis</li> <li>AI assistant integration research</li> <li>Voice command system evaluation</li> <li>User experience considerations</li> </ul>"},{"location":"project/changelog/#020-2023-08-15","title":"[0.2.0] - 2023-08-15","text":""},{"location":"project/changelog/#added_9","title":"Added","text":"<ul> <li>Project ideation and scoping</li> <li>Initial requirements brainstorming</li> <li>Technology stack research</li> <li>Development approach evaluation</li> </ul>"},{"location":"project/changelog/#010-2023-08-01","title":"[0.1.0] - 2023-08-01","text":""},{"location":"project/changelog/#added_10","title":"Added","text":"<ul> <li>Project repository creation</li> <li>Initial project documentation</li> <li>Basic README and setup instructions</li> <li>Development roadmap outline</li> </ul>"},{"location":"project/changelog/#types-of-changes","title":"Types of Changes","text":"<ul> <li>Added for new features</li> <li>Changed for changes in existing functionality</li> <li>Deprecated for soon-to-be removed features</li> <li>Removed for now removed features</li> <li>Fixed for any bug fixes</li> <li>Security in case of vulnerabilities</li> </ul>"},{"location":"project/changelog/#version-numbering","title":"Version Numbering","text":"<p>This project uses Semantic Versioning:</p> <ul> <li>MAJOR version for incompatible API changes</li> <li>MINOR version for backwards-compatible functionality additions</li> <li>PATCH version for backwards-compatible bug fixes</li> </ul>"},{"location":"project/changelog/#release-process","title":"Release Process","text":"<ol> <li>Feature Complete: All planned features implemented and tested</li> <li>Code Review: Pull requests reviewed and approved</li> <li>Testing: Full test suite passes with &gt;80% coverage</li> <li>Documentation: Updated for new features and changes</li> <li>Version Bump: Update version numbers in relevant files</li> <li>Changelog: Update this changelog with release notes</li> <li>Tag Release: Create Git tag for the release</li> <li>Deploy: Deploy to production environment</li> <li>Announce: Notify community of new release</li> </ol>"},{"location":"project/changelog/#future-releases","title":"Future Releases","text":""},{"location":"project/changelog/#planned-for-v110","title":"Planned for v1.1.0","text":"<ul> <li>Enhanced voice command accuracy improvements</li> <li>Mobile application development</li> <li>Advanced analytics dashboard</li> <li>Integration with additional gaming platforms</li> </ul>"},{"location":"project/changelog/#planned-for-v120","title":"Planned for v1.2.0","text":"<ul> <li>Multi-language support for voice commands</li> <li>Advanced AI commander personalities</li> <li>Real-time collaboration features</li> <li>Enhanced security features</li> </ul>"},{"location":"project/changelog/#planned-for-v200","title":"Planned for v2.0.0","text":"<ul> <li>Cross-game compatibility</li> <li>Advanced AI features (predictive analytics)</li> <li>Third-party integrations</li> <li>Enterprise features for large guilds</li> </ul> <p>For more detailed information about each release, see the GitHub releases page.</p>"},{"location":"project/plan/","title":"Plan","text":"<p>Based on my analysis of the provided documents and current codebase, here's a comprehensive solution for developing the Star Citizen MVP:</p>"},{"location":"project/plan/#summary-of-key-requirements-and-objectives","title":"Summary of Key Requirements and Objectives","text":"<p>From MVP_Spec_StarCitizen.md: - Multitenant AI-assisted coordination platform for Star Citizen guilds - Core entities: Guilds, Users (with voice features), AI Commander, Squads, Ranks, Access Levels, Objectives (with JSONB descriptions), Tasks (with JSONB scheduling), Objective Categories - Key features: Voice-driven flows via Wingman-AI, rank-based authorization, web PWA UI, game overlay, push notifications - Security-first approach with deny-by-default access control - 13-week development timeline with specific phases</p> <p>From Project_Proposal.md: - Enhance player coordination in sandbox MMO environments - AI-driven immersion with natural language processing - Scalable multitenant architecture supporting multiple guilds - Voice interaction, predefined templates, and real-time notifications - Iterative development with early prototyping and user feedback</p> <p>Current Codebase Analysis: - Foundation exists: Basic models (User, Guild, Squad, Objective, Task, AICommander), comprehensive Wingman-AI skill, API routes for core operations - Gaps: Missing Ranks, Access Levels, Objective Categories entities; incomplete User model (missing phonetic, availability, rank, preferences, pin); no authentication/authorization system; no UI components; no notification system</p>"},{"location":"project/plan/#step-by-step-implementation-plan","title":"Step-by-Step Implementation Plan","text":"<p>Given the single developer with AI assistance constraint, I've adjusted the original 13-week timeline to a realistic 16-20 week schedule with focused milestones:</p>"},{"location":"project/plan/#phase-1-foundation-core-entities-weeks-1-4","title":"Phase 1: Foundation &amp; Core Entities (Weeks 1-4)","text":"<p>Milestones: - Complete database schema with all missing entities - Enhance User model with voice and security features - Implement basic authentication (credentials + PIN) - Resource allocation: 40% backend development, 20% database design</p>"},{"location":"project/plan/#phase-2-security-authorization-weeks-5-7","title":"Phase 2: Security &amp; Authorization (Weeks 5-7)","text":"<p>Milestones: - Implement rank-based access control system - Add MFA and session management - Complete authorization middleware - Resource allocation: 50% security implementation, 20% testing</p>"},{"location":"project/plan/#phase-3-api-enhancement-voice-integration-weeks-8-10","title":"Phase 3: API Enhancement &amp; Voice Integration (Weeks 8-10)","text":"<p>Milestones: - Enhance API routes for all entities and user actions - Complete Wingman-AI skill with full voice parsing - Implement progress tracking and metrics parsing - Resource allocation: 40% API development, 30% AI integration</p>"},{"location":"project/plan/#phase-4-user-interfaces-weeks-11-14","title":"Phase 4: User Interfaces (Weeks 11-14)","text":"<p>Milestones: - Develop React PWA for web interface - Create game overlay UI components - Implement responsive design and accessibility - Resource allocation: 60% frontend development, 20% UI/UX design</p>"},{"location":"project/plan/#phase-5-advanced-features-testing-weeks-15-18","title":"Phase 5: Advanced Features &amp; Testing (Weeks 15-18)","text":"<p>Milestones: - Implement notification system with push updates - Add analytics and AI debrief capabilities - Complete testing suite and quality assurance - Resource allocation: 40% feature development, 40% testing</p>"},{"location":"project/plan/#phase-6-deployment-launch-weeks-19-20","title":"Phase 6: Deployment &amp; Launch (Weeks 19-20)","text":"<p>Milestones: - Prepare deployment infrastructure - Create documentation and user guides - Launch MVP with monitoring - Resource allocation: 50% deployment, 30% documentation</p>"},{"location":"project/plan/#potential-risks-challenges-and-mitigation-strategies","title":"Potential Risks, Challenges, and Mitigation Strategies","text":"<p>Technical Challenges: - Voice parsing accuracy: Risk of misinterpretation in complex commands   - Mitigation: Implement fallback mechanisms, extensive testing with community, gradual feature rollout - Real-time performance: Game overlay and voice responses must be &lt;2s latency   - Mitigation: Optimize database queries, implement caching, use efficient AI models</p> <p>Security Challenges: - Multitenant data isolation: Risk of cross-guild data leakage   - Mitigation: Strict guild_id filtering, regular security audits, encrypted data storage - Voice authentication: PIN-based voice access could be vulnerable   - Mitigation: Combine with biometric factors, implement rate limiting, audit logging</p> <p>Development Challenges: - Single developer workload: High risk of burnout and scope creep   - Mitigation: Prioritize MVP features, use AI assistance extensively, break into small sprints - Integration complexity: Wingman-AI and game overlay integration   - Mitigation: Start with PoC, incremental testing, community beta testing</p> <p>Business Challenges: - User adoption: Complex voice flows may have learning curve   - Mitigation: Provide clear tutorials, gradual feature introduction, user feedback loops - Scalability: Initial architecture may not handle rapid growth   - Mitigation: Design for horizontal scaling, monitor performance metrics</p>"},{"location":"project/plan/#evaluation-criteria-for-success-and-metrics","title":"Evaluation Criteria for Success and Metrics","text":"<p>Functional Success Criteria: - 90%+ voice command accuracy in controlled testing - &lt;2 second response latency for voice interactions - Complete CRUD operations for all entities - Seamless integration with Wingman-AI</p> <p>User Experience Success Criteria: - Intuitive voice-driven workflows - Responsive web and overlay interfaces - Clear feedback for all user actions - Accessible design for diverse users</p> <p>Technical Success Criteria: - 99% uptime for core services - Secure multitenant data isolation - Scalable architecture supporting 1000+ concurrent users - Comprehensive API documentation</p> <p>Key Performance Metrics: - Voice command success rate (&gt;90%) - User session duration and engagement - Task completion rates through the platform - Guild adoption and retention metrics - System performance (latency, throughput, error rates)</p>"},{"location":"project/plan/#recommendations-for-tools-technologies-and-team-roles","title":"Recommendations for Tools, Technologies, and Team Roles","text":"<p>Technology Stack: - Backend: FastAPI (Python) for high-performance APIs - Database: PostgreSQL with SQLAlchemy ORM - Frontend: React with TypeScript for type safety - AI/Voice: OpenAI GPT-4 for natural language processing, Whisper for STT, ElevenLabs for TTS - Authentication: JWT tokens with refresh mechanisms - Deployment: AWS Lambda/RDS for serverless scalability, or local Flask for PoC - Testing: Pytest for backend, Jest for frontend, Playwright for E2E</p> <p>Development Tools: - Version Control: Git with GitHub for collaboration - CI/CD: GitHub Actions for automated testing and deployment - Documentation: MkDocs for API docs, Figma for UI mockups - Monitoring: Sentry for error tracking, Grafana for metrics</p> <p>Team Roles (Single Developer with AI): - Full-Stack Developer: Handle backend, frontend, and integration - AI Specialist: Fine-tune voice parsing and AI responses - Security Engineer: Implement authentication and authorization - UX Designer: Design intuitive interfaces and voice flows - DevOps Engineer: Manage deployment and monitoring</p> <p>Resource Allocation: - Development time: 60% coding, 20% testing, 10% documentation, 10% planning - Tools budget: $500-2000 (development tools, cloud credits, AI API costs) - Learning investment: Allocate time for AI integration and voice technologies</p> <p>This plan provides a structured path to MVP completion while addressing the key requirements from both documents. The phased approach allows for iterative development and early validation of critical features like voice integration.</p> <p>Are you pleased with this comprehensive development plan? If yes, I can switch to Code mode to begin implementation starting with the database models and authentication system.</p>"},{"location":"project/proposal/","title":"Project Proposal: AI-Integrated Organization Framework for Sandbox MMO Games","text":""},{"location":"project/proposal/#overview","title":"Overview","text":"<p>This living document outlines the proposal for a multitenant application designed to enhance organization and management in sandbox MMO games. The app acts as a parallel, immersive framework that complements existing games without replacing in-game mechanics or external communication tools. It leverages AI to streamline coordination, role assignment, and objective tracking, fostering deeper community engagement in games like Star Citizen, DCS, Scum, Arma, Elite Dangerous, No Man's Sky, and similar titles.</p> <p>The system is envisioned as a scalable, AI-powered platform that integrates voice commands, predefined game-specific templates, and notifications to help guilds, squads, or fleets organize efficiently. It supports multitenancy, allowing different groups (e.g., clans or corporations) to operate independently within the same infrastructure.</p> <p>This document is \"living\" and can be iteratively updated based on discussions. Initial goals and functionalities are derived from the provided requirements, with room for additions, modifications, or removals.</p>"},{"location":"project/proposal/#clear-goals","title":"Clear Goals","text":"<ol> <li>Enhance Player Coordination: Provide tools for seamless organization in chaotic sandbox environments, reducing reliance on ad-hoc external tools like spreadsheets or forums.</li> <li>AI-Driven Immersion: Use AI to generate contextual suggestions, automate routine tasks (e.g., role assignments based on player skills), and offer voice-interactive planning.</li> <li>Multitenant Scalability: Support multiple independent tenants (e.g., different guilds across games) with shared infrastructure but isolated data.</li> <li>Integration-Friendly Design: Complement existing ecosystems like Discord for commands and voice, without disrupting general chat.</li> <li>Security and Accessibility: Ensure robust authentication, access controls, and notifications to keep members engaged and informed.</li> <li>Monetization and Sustainability: Develop a viable financial model to support development, maintenance, and growth.</li> <li>Iterative Development: Start with core features, identify early issues via prototypes, and expand based on user feedback.</li> </ol>"},{"location":"project/proposal/#functionality-description","title":"Functionality Description","text":"<p>The app will include the following key features, categorized for clarity. Each can be expanded with AI enhancements (e.g., natural language processing for voice inputs or predictive analytics for objectives).</p> <ul> <li>Members Administration:</li> <li>User registration, profile management, and onboarding.</li> <li>Bulk import/export of member lists (e.g., from game APIs or CSV files).</li> <li> <p>AI-assisted member vetting (e.g., sentiment analysis on application messages).</p> </li> <li> <p>Members Roles:</p> </li> <li>Customizable role hierarchies (e.g., leader, officer, scout, engineer).</li> <li>Role-based permissions and automated assignments via AI (e.g., based on playstyle data).</li> <li> <p>Role evolution tracking (e.g., promotions based on contributions).</p> </li> <li> <p>Objectives Management:</p> </li> <li>Creation, assignment, and tracking of goals (e.g., \"Capture sector X\" in Star Citizen).</li> <li>AI-generated sub-tasks, progress predictions, and failure analysis.</li> <li> <p>Collaborative editing with version history.</p> </li> <li> <p>Events Scheduling:</p> </li> <li>Calendar integration for raids, meetings, or patrols.</li> <li>Timezone-aware reminders and conflict detection.</li> <li> <p>AI-suggested optimal timings based on member availability.</p> </li> <li> <p>Members Authentication:</p> </li> <li>Multi-factor authentication (MFA) with options for game-linked logins (e.g., OAuth via Steam or game APIs).</li> <li> <p>Session management and audit logs for security.</p> </li> <li> <p>Access Management:</p> </li> <li>Granular permissions (e.g., view-only for recruits, edit for officers).</li> <li>Tenant isolation to prevent cross-group data leaks.</li> <li> <p>AI-monitored access anomalies (e.g., unusual login patterns).</p> </li> <li> <p>Voice Interaction with the System:</p> </li> <li>Voice-to-text commands for hands-free use (e.g., \"Assign role pilot to user X\").</li> <li>AI responses via synthesized speech or text summaries.</li> <li> <p>Integration hooks for Discord bots to relay commands without full replacement.</p> </li> <li> <p>Predefined Fictional Templates (Context) for Different Games:</p> </li> <li>Game-specific lore integrations (e.g., Star Citizen ship roles, Elite Dangerous faction templates).</li> <li>AI-customizable templates for quick setup (e.g., \"Generate a fleet command structure for DCS\").</li> <li> <p>Fictional narratives to immerse users (e.g., AI-generated mission briefs).</p> </li> <li> <p>Push Notifications:</p> </li> <li>Real-time alerts for events, objective updates, or role changes.</li> <li>Customizable channels (e.g., mobile app, email, in-app).</li> <li>AI-prioritized notifications to avoid spam.</li> </ul>"},{"location":"project/proposal/#additional-potential-features-to-be-discussed","title":"Additional Potential Features (To Be Discussed):","text":"<ul> <li>Analytics dashboard for group performance.</li> <li>Integration with game APIs for real-time data sync (e.g., player locations).</li> <li>Gamification elements like badges for organizational contributions.</li> </ul>"},{"location":"project/proposal/#challenges-and-unknowns","title":"Challenges and Unknowns","text":"<ul> <li>Architectural Design: Options include centralized (easy management, single point of failure), partially centralized (hybrid for scalability), or distributed/synchronized (blockchain-like for decentralization). Recommendation: Start with partially centralized using cloud services for flexibility.</li> <li>Interaction Interfaces: Web/app-based UI, mobile apps, voice-only modes. Prioritize responsive design and accessibility.</li> <li>Technology Stack: Backend (Node.js/Python with Flask/Django), Frontend (React/Vue), Database (PostgreSQL for relational data, MongoDB for flexible schemas), AI (OpenAI APIs or Hugging Face models for NLP/voice). Cloud (AWS/Azure for multitenancy).</li> <li>Financial Model: Freemium (basic features free, premium for AI/advanced integrations), subscription tiers, or partnerships with game devs. Explore grants for AI innovation.</li> <li>Resources and Timelines: MVP in 3-6 months with a small team (2-3 devs, 1 designer, AI specialist). Full launch in 12-18 months. Budget estimate: \\(50K-\\)200K initially, depending on scope.</li> </ul> <p>This document can be versioned (e.g., v1.0) and updated collaboratively.</p>"},{"location":"setup/configuration/","title":"Configuration Guide","text":"<p>This guide explains how to configure SphereConnect for different environments and use cases.</p>"},{"location":"setup/configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"setup/configuration/#core-configuration","title":"Core Configuration","text":""},{"location":"setup/configuration/#database-settings","title":"Database Settings","text":"<pre><code># PostgreSQL connection parameters\nDB_USER=postgres                    # Database username\nDB_PASS=your_secure_password        # Database password\nDB_HOST=localhost                   # Database host\nDB_PORT=5432                        # Database port\nDB_NAME=sphereconnect               # Database name\n</code></pre>"},{"location":"setup/configuration/#security-settings","title":"Security Settings","text":"<pre><code># JWT token configuration\nJWT_SECRET_KEY=your-256-bit-secret  # Must be strong for production\nJWT_ALGORITHM=HS256                 # HS256 recommended\nJWT_ACCESS_TOKEN_EXPIRE_MINUTES=30  # Token lifetime\n\n# General security\nSECRET_KEY=another-strong-secret    # Flask/Django style secret\n</code></pre>"},{"location":"setup/configuration/#email-configuration-optional","title":"Email Configuration (Optional)","text":"<pre><code># SMTP settings for notifications\nEMAIL_USER=your-email@gmail.com     # SMTP username\nEMAIL_PASS=your-app-password        # SMTP password/app password\nEMAIL_HOST=smtp.gmail.com           # SMTP server\nEMAIL_PORT=587                      # SMTP port\n</code></pre>"},{"location":"setup/configuration/#advanced-settings","title":"Advanced Settings","text":""},{"location":"setup/configuration/#rate-limiting","title":"Rate Limiting","text":"<pre><code># Request rate limits (requests per minute)\nLOGIN_RATE_LIMIT=5                  # Login attempts\nREGISTER_RATE_LIMIT=3               # Registration attempts\n</code></pre>"},{"location":"setup/configuration/#security-policies","title":"Security Policies","text":"<pre><code># Account security\nMAX_FAILED_ATTEMPTS=5               # Before lockout\nLOCKOUT_DURATION_MINUTES=15         # Lockout period\nMAX_CONCURRENT_SESSIONS=3           # Per user\n</code></pre>"},{"location":"setup/configuration/#ai-commander-settings","title":"AI Commander Settings","text":"<pre><code># Default AI personality\nDEFAULT_AI_NAME=UEE Commander\nDEFAULT_SYSTEM_PROMPT=Act as a UEE Commander coordinating Star Citizen guild missions\nDEFAULT_USER_PROMPT=Be formal and strategic in responses\n</code></pre>"},{"location":"setup/configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"setup/configuration/#envlocal-development","title":".env.local (Development)","text":"<p>Create this file in the project root for local development: <pre><code># Development configuration\nDB_USER=postgres\nDB_PASS=dev_password\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=sphereconnect_dev\n\nJWT_SECRET_KEY=dev-secret-key-change-in-production\nSECRET_KEY=dev-flask-secret\n\n# Development features\nDEBUG=True\nLOG_LEVEL=DEBUG\n</code></pre></p>"},{"location":"setup/configuration/#env-production","title":".env (Production)","text":"<p>For production deployment: <pre><code># Production database\nDB_USER=sphereconnect_prod\nDB_PASS=strong_production_password\nDB_HOST=prod-db-server.internal\nDB_PORT=5432\nDB_NAME=sphereconnect\n\n# Strong production secrets (generate randomly)\nJWT_SECRET_KEY=256-bit-production-secret-here\nSECRET_KEY=production-flask-secret-here\n\n# Production settings\nDEBUG=False\nLOG_LEVEL=WARNING\n\n# Email for notifications\nEMAIL_USER=noreply@yourdomain.com\nEMAIL_PASS=secure-app-password\n</code></pre></p>"},{"location":"setup/configuration/#guild-specific-configuration","title":"Guild-Specific Configuration","text":""},{"location":"setup/configuration/#creating-a-new-guild","title":"Creating a New Guild","text":"<pre><code>from app.core.models import Guild, AICommander\nfrom app.utils.db_utils import get_db_session\n\n# Create guild\nguild = Guild(\n    name=\"My Star Citizen Fleet\",\n    description=\"Elite squadron for deep space operations\"\n)\n\n# Create AI commander for the guild\ncommander = AICommander(\n    guild_id=guild.id,\n    name=\"Fleet Admiral\",\n    system_prompt=\"You are the Fleet Admiral commanding operations\",\n    user_prompt=\"Be decisive and tactical\"\n)\n</code></pre>"},{"location":"setup/configuration/#guild-settings","title":"Guild Settings","text":"<p>Each guild can have custom: - AI Commander personality - Rank hierarchies - Access level definitions - Notification preferences - Time zone settings</p>"},{"location":"setup/configuration/#wingman-ai-integration","title":"Wingman-AI Integration","text":""},{"location":"setup/configuration/#skill-configuration","title":"Skill Configuration","text":"<p>Update <code>wingman-ai/configs/_SphereConnect/UEE Commander.yaml</code>: <pre><code>name: \"UEE Commander\"\ndescription: \"SphereConnect coordination assistant\"\napi_endpoint: \"http://localhost:8000\"\nvoice_settings:\n  tts_provider: \"elevenlabs\"\n  stt_provider: \"whisper\"\n  voice: \"male_commander\"\n</code></pre></p>"},{"location":"setup/configuration/#voice-command-customization","title":"Voice Command Customization","text":"<p>Modify intent patterns in <code>app/api/src/wingman_skill_poc.py</code>: <pre><code>intent_patterns = {\n    'create_objective': r'create objective: (.+)',\n    'assign_task': r'assign task (.+) to (.+)',\n    # Add custom patterns\n    'custom_command': r'your custom pattern here'\n}\n</code></pre></p>"},{"location":"setup/configuration/#database-configuration","title":"Database Configuration","text":""},{"location":"setup/configuration/#connection-pooling","title":"Connection Pooling","text":"<pre><code># In app/core/models.py\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\n    DATABASE_URL,\n    pool_size=10,          # Connection pool size\n    max_overflow=20,       # Max overflow connections\n    pool_timeout=30,       # Connection timeout\n    pool_recycle=3600      # Recycle connections hourly\n)\n</code></pre>"},{"location":"setup/configuration/#schema-initialization","title":"Schema Initialization","text":"<pre><code># Initialize database schema\npython scripts/db_init.py\n\n# Populate with sample data\npython scripts/test_data.py\n</code></pre>"},{"location":"setup/configuration/#frontend-configuration","title":"Frontend Configuration","text":""},{"location":"setup/configuration/#api-endpoint-configuration","title":"API Endpoint Configuration","text":"<p>Update <code>frontend/src/config/api.js</code>: <pre><code>const API_CONFIG = {\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n</code></pre></p>"},{"location":"setup/configuration/#environment-variables-for-frontend","title":"Environment Variables for Frontend","text":"<p>Create <code>frontend/.env.local</code>: <pre><code>REACT_APP_API_URL=http://localhost:8000\nREACT_APP_ENVIRONMENT=development\nREACT_APP_VERSION=1.0.0\n</code></pre></p>"},{"location":"setup/configuration/#deployment-configurations","title":"Deployment Configurations","text":""},{"location":"setup/configuration/#docker-configuration","title":"Docker Configuration","text":"<p><code>docker-compose.yml</code>: <pre><code>version: '3.8'\nservices:\n  sphereconnect:\n    build: .\n    environment:\n      - DB_HOST=db\n      - DB_USER=sphereconnect\n      - DB_PASS=secure_password\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=sphereconnect\n      - POSTGRES_USER=sphereconnect\n      - POSTGRES_PASSWORD=secure_password\n</code></pre></p>"},{"location":"setup/configuration/#nginx-configuration","title":"Nginx Configuration","text":"<p>For production web server: <pre><code>server {\n    listen 80;\n    server_name yourdomain.com;\n\n    location / {\n        proxy_pass http://localhost:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    location /api {\n        proxy_pass http://localhost:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre></p>"},{"location":"setup/configuration/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"setup/configuration/#log-configuration","title":"Log Configuration","text":"<pre><code>import logging\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('logs/sphereconnect.log'),\n        logging.StreamHandler()\n    ]\n)\n</code></pre>"},{"location":"setup/configuration/#health-check-endpoints","title":"Health Check Endpoints","text":"<pre><code>@app.get(\"/health\")\nasync def health_check():\n    return {\n        \"status\": \"healthy\",\n        \"database\": check_db_connection(),\n        \"version\": \"1.0.0\"\n    }\n</code></pre>"},{"location":"setup/configuration/#security-best-practices","title":"Security Best Practices","text":""},{"location":"setup/configuration/#secret-management","title":"Secret Management","text":"<ul> <li>Never commit secrets to version control</li> <li>Use environment variables for all sensitive data</li> <li>Rotate secrets regularly</li> <li>Use different secrets for different environments</li> </ul>"},{"location":"setup/configuration/#network-security","title":"Network Security","text":"<ul> <li>Use HTTPS in production</li> <li>Implement proper CORS settings</li> <li>Rate limit all public endpoints</li> <li>Use firewalls and security groups</li> </ul>"},{"location":"setup/configuration/#data-protection","title":"Data Protection","text":"<ul> <li>Encrypt sensitive data at rest</li> <li>Use prepared statements to prevent SQL injection</li> <li>Implement proper input validation</li> <li>Regular security audits</li> </ul>"},{"location":"setup/configuration/#troubleshooting-configuration-issues","title":"Troubleshooting Configuration Issues","text":""},{"location":"setup/configuration/#database-connection-problems","title":"Database Connection Problems","text":"<pre><code># Test connection\npython -c \"import psycopg2; psycopg2.connect(DATABASE_URL)\"\n\n# Check environment variables\necho $DATABASE_URL\n</code></pre>"},{"location":"setup/configuration/#jwt-token-issues","title":"JWT Token Issues","text":"<ul> <li>Verify <code>JWT_SECRET_KEY</code> is set</li> <li>Check token expiration settings</li> <li>Ensure clock synchronization between services</li> </ul>"},{"location":"setup/configuration/#cors-errors","title":"CORS Errors","text":"<pre><code>// Frontend CORS configuration\nconst corsOptions = {\n  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],\n  credentials: true\n};\n</code></pre>"},{"location":"setup/configuration/#next-steps","title":"Next Steps","text":"<p>After configuration: - Deploy your instance - Set up monitoring - Configure backups</p>"},{"location":"setup/deployment/","title":"Deployment Guide","text":"<p>This guide covers deploying SphereConnect to production environments with best practices for security, scalability, and monitoring.</p>"},{"location":"setup/deployment/#deployment-options","title":"Deployment Options","text":""},{"location":"setup/deployment/#1-docker-deployment-recommended","title":"1. Docker Deployment (Recommended)","text":""},{"location":"setup/deployment/#docker-compose-setup","title":"Docker Compose Setup","text":"<p>Create <code>docker-compose.yml</code>: <pre><code>version: '3.8'\n\nservices:\n  sphereconnect:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DB_HOST=db\n      - DB_USER=sphereconnect\n      - DB_PASS=${DB_PASS}\n      - JWT_SECRET_KEY=${JWT_SECRET_KEY}\n    depends_on:\n      - db\n    restart: unless-stopped\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=sphereconnect\n      - POSTGRES_USER=sphereconnect\n      - POSTGRES_PASSWORD=${DB_PASS}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/ssl/certs\n    depends_on:\n      - sphereconnect\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n</code></pre></p>"},{"location":"setup/deployment/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    postgresql-client \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN useradd --create-home --shell /bin/bash app \\\n    &amp;&amp; chown -R app:app /app\nUSER app\n\nEXPOSE 8000\n\nCMD [\"python\", \"scripts/start_server.py\"]\n</code></pre>"},{"location":"setup/deployment/#build-and-deploy","title":"Build and Deploy","text":"<pre><code># Build and start services\ndocker-compose up -d --build\n\n# View logs\ndocker-compose logs -f sphereconnect\n\n# Scale services\ndocker-compose up -d --scale sphereconnect=3\n</code></pre>"},{"location":"setup/deployment/#2-cloud-deployment","title":"2. Cloud Deployment","text":""},{"location":"setup/deployment/#aws-deployment","title":"AWS Deployment","text":"<pre><code># Using AWS Elastic Beanstalk\neb init sphereconnect\neb create production-env\n\n# Or using ECS\naws ecs create-cluster --cluster-name sphereconnect\naws ecs register-task-definition --cli-input-json file://task-definition.json\n</code></pre>"},{"location":"setup/deployment/#heroku-deployment","title":"Heroku Deployment","text":"<pre><code># Create Heroku app\nheroku create sphereconnect-prod\n\n# Set environment variables\nheroku config:set DB_URL=postgresql://...\nheroku config:set JWT_SECRET_KEY=...\n\n# Deploy\ngit push heroku main\n</code></pre>"},{"location":"setup/deployment/#3-manual-server-deployment","title":"3. Manual Server Deployment","text":""},{"location":"setup/deployment/#system-preparation","title":"System Preparation","text":"<pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Python and pip\nsudo apt install python3 python3-pip python3-venv -y\n\n# Install PostgreSQL\nsudo apt install postgresql postgresql-contrib -y\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n</code></pre>"},{"location":"setup/deployment/#application-setup","title":"Application Setup","text":"<pre><code># Create application user\nsudo useradd --system --shell /bin/bash --home /opt/sphereconnect sphereconnect\n\n# Create directories\nsudo mkdir -p /opt/sphereconnect\nsudo chown sphereconnect:sphereconnect /opt/sphereconnect\n\n# Clone repository\nsudo -u sphereconnect git clone https://github.com/your-org/sphereconnect.git /opt/sphereconnect\n\n# Setup virtual environment\nsudo -u sphereconnect python3 -m venv /opt/sphereconnect/venv\nsudo -u sphereconnect /opt/sphereconnect/venv/bin/pip install -r /opt/sphereconnect/requirements.txt\n</code></pre>"},{"location":"setup/deployment/#database-setup","title":"Database Setup","text":"<pre><code># Create database user\nsudo -u postgres createuser --createdb --login sphereconnect\n\n# Set password\nsudo -u postgres psql -c \"ALTER USER sphereconnect PASSWORD 'secure_password';\"\n\n# Create database\nsudo -u postgres createdb -O sphereconnect sphereconnect\n</code></pre>"},{"location":"setup/deployment/#systemd-service","title":"Systemd Service","text":"<p>Create <code>/etc/systemd/system/sphereconnect.service</code>: <pre><code>[Unit]\nDescription=SphereConnect Application\nAfter=network.target postgresql.service\nRequires=postgresql.service\n\n[Service]\nType=simple\nUser=sphereconnect\nWorkingDirectory=/opt/sphereconnect\nEnvironment=PATH=/opt/sphereconnect/venv/bin\nExecStart=/opt/sphereconnect/venv/bin/python scripts/start_server.py\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p>"},{"location":"setup/deployment/#nginx-configuration","title":"Nginx Configuration","text":"<p>Create <code>/etc/nginx/sites-available/sphereconnect</code>: <pre><code>server {\n    listen 80;\n    server_name yourdomain.com;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/opt/sphereconnect/sphereconnect.sock;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /static {\n        alias /opt/sphereconnect/static;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n}\n</code></pre></p>"},{"location":"setup/deployment/#ssl-configuration","title":"SSL Configuration","text":"<pre><code># Install Certbot\nsudo apt install certbot python3-certbot-nginx -y\n\n# Get SSL certificate\nsudo certbot --nginx -d yourdomain.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"setup/deployment/#environment-configuration","title":"Environment Configuration","text":""},{"location":"setup/deployment/#production-environment-variables","title":"Production Environment Variables","text":"<p>Create <code>/opt/sphereconnect/.env</code>: <pre><code># Database\nDB_USER=sphereconnect\nDB_PASS=secure_production_password\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=sphereconnect\n\n# Security\nJWT_SECRET_KEY=256-bit-production-secret-here\nSECRET_KEY=production-flask-secret-here\n\n# Application\nDEBUG=False\nLOG_LEVEL=WARNING\nENVIRONMENT=production\n\n# Email\nEMAIL_USER=noreply@yourdomain.com\nEMAIL_PASS=secure-app-password\n</code></pre></p>"},{"location":"setup/deployment/#security-hardening","title":"Security Hardening","text":""},{"location":"setup/deployment/#firewall-configuration","title":"Firewall Configuration","text":"<pre><code># UFW setup\nsudo ufw allow OpenSSH\nsudo ufw allow 'Nginx Full'\nsudo ufw --force enable\n\n# Or iptables\nsudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables -P INPUT DROP\n</code></pre>"},{"location":"setup/deployment/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<pre><code>server {\n    listen 443 ssl http2;\n    server_name yourdomain.com;\n\n    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n}\n</code></pre>"},{"location":"setup/deployment/#database-security","title":"Database Security","text":"<pre><code>-- Create limited user for application\nCREATE USER sphereconnect_app WITH PASSWORD 'app_password';\nGRANT CONNECT ON DATABASE sphereconnect TO sphereconnect_app;\nGRANT USAGE ON SCHEMA public TO sphereconnect_app;\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO sphereconnect_app;\n\n-- Row Level Security (if using PostgreSQL 9.5+)\nALTER TABLE users ENABLE ROW LEVEL SECURITY;\nCREATE POLICY user_isolation ON users USING (guild_id = current_setting('app.guild_id')::uuid);\n</code></pre>"},{"location":"setup/deployment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"setup/deployment/#application-logging","title":"Application Logging","text":"<pre><code>import logging\nfrom logging.handlers import RotatingFileHandler\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        RotatingFileHandler(\n            '/var/log/sphereconnect/app.log',\n            maxBytes=10485760,  # 10MB\n            backupCount=5\n        ),\n        logging.StreamHandler()\n    ]\n)\n</code></pre>"},{"location":"setup/deployment/#system-monitoring","title":"System Monitoring","text":"<pre><code># Install monitoring tools\nsudo apt install htop iotop sysstat -y\n\n# Log rotation\nsudo cat &gt; /etc/logrotate.d/sphereconnect &lt;&lt; EOF\n/var/log/sphereconnect/*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 644 sphereconnect sphereconnect\n    postrotate\n        systemctl reload sphereconnect\n    endscript\n}\nEOF\n</code></pre>"},{"location":"setup/deployment/#health-checks","title":"Health Checks","text":"<pre><code>@app.get(\"/health\")\nasync def health_check():\n    \"\"\"Comprehensive health check endpoint\"\"\"\n    health_status = {\n        \"status\": \"healthy\",\n        \"checks\": {\n            \"database\": await check_database(),\n            \"redis\": await check_redis(),  # if used\n            \"external_services\": await check_external_apis()\n        },\n        \"version\": get_version(),\n        \"timestamp\": datetime.utcnow().isoformat()\n    }\n\n    # Return unhealthy if any check fails\n    if any(not check[\"healthy\"] for check in health_status[\"checks\"].values()):\n        health_status[\"status\"] = \"unhealthy\"\n        raise HTTPException(status_code=503, detail=health_status)\n\n    return health_status\n</code></pre>"},{"location":"setup/deployment/#backup-strategy","title":"Backup Strategy","text":""},{"location":"setup/deployment/#database-backup","title":"Database Backup","text":"<pre><code># Daily backup script\n#!/bin/bash\nBACKUP_DIR=\"/opt/sphereconnect/backups\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup\npg_dump -U sphereconnect -h localhost sphereconnect &gt; \"$BACKUP_DIR/sphereconnect_$DATE.sql\"\n\n# Compress\ngzip \"$BACKUP_DIR/sphereconnect_$DATE.sql\"\n\n# Keep only last 7 days\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +7 -delete\n</code></pre>"},{"location":"setup/deployment/#application-backup","title":"Application Backup","text":"<pre><code># Backup configuration and data\ntar -czf \"/opt/sphereconnect/backups/app_$DATE.tar.gz\" \\\n    /opt/sphereconnect/.env \\\n    /opt/sphereconnect/uploads/ \\\n    /opt/sphereconnect/logs/\n</code></pre>"},{"location":"setup/deployment/#automated-backups","title":"Automated Backups","text":"<pre><code># Add to crontab\n0 2 * * * /opt/sphereconnect/scripts/backup.sh\n</code></pre>"},{"location":"setup/deployment/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"setup/deployment/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code># Load balancer configuration (nginx)\nupstream sphereconnect_backend {\n    server 127.0.0.1:8000;\n    server 127.0.0.1:8001;\n    server 127.0.0.1:8002;\n}\n\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://sphereconnect_backend;\n    }\n}\n</code></pre>"},{"location":"setup/deployment/#database-scaling","title":"Database Scaling","text":"<ul> <li>Use read replicas for read-heavy operations</li> <li>Implement connection pooling</li> <li>Consider database sharding for multi-tenant growth</li> </ul>"},{"location":"setup/deployment/#caching-strategy","title":"Caching Strategy","text":"<pre><code>from cachetools import TTLCache\nfrom functools import lru_cache\n\n# In-memory cache for frequently accessed data\nguild_cache = TTLCache(maxsize=1000, ttl=300)  # 5 minutes\n\n@lru_cache(maxsize=500)\ndef get_user_permissions(user_id: str, guild_id: str):\n    \"\"\"Cache user permissions to reduce database queries\"\"\"\n    # Implementation\n</code></pre>"},{"location":"setup/deployment/#performance-optimization","title":"Performance Optimization","text":""},{"location":"setup/deployment/#database-optimization","title":"Database Optimization","text":"<pre><code>-- Create indexes for common queries\nCREATE INDEX idx_users_guild_id ON users(guild_id);\nCREATE INDEX idx_objectives_guild_id ON objectives(guild_id);\nCREATE INDEX idx_tasks_objective_id ON tasks(objective_id);\n\n-- Analyze query performance\nEXPLAIN ANALYZE SELECT * FROM users WHERE guild_id = 'uuid-here';\n</code></pre>"},{"location":"setup/deployment/#application-optimization","title":"Application Optimization","text":"<pre><code># Use async database operations\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\n\nasync_engine = create_async_engine(DATABASE_URL.replace(\"postgresql://\", \"postgresql+asyncpg://\"))\n\nasync def get_user_async(user_id: str):\n    async with AsyncSession(async_engine) as session:\n        result = await session.execute(select(User).where(User.id == user_id))\n        return result.scalar_one_or_none()\n</code></pre>"},{"location":"setup/deployment/#troubleshooting-production-issues","title":"Troubleshooting Production Issues","text":""},{"location":"setup/deployment/#common-problems","title":"Common Problems","text":"<p>High Memory Usage <pre><code># Check memory usage\nhtop\n# Or\nps aux --sort=-%mem | head\n\n# Restart service if needed\nsudo systemctl restart sphereconnect\n</code></pre></p> <p>Database Connection Pool Exhausted <pre><code># Check active connections\npsql -U postgres -c \"SELECT count(*) FROM pg_stat_activity;\"\n\n# Increase pool size in configuration\npool_size=20\nmax_overflow=30\n</code></pre></p> <p>Slow Response Times <pre><code># Profile application\npython -m cProfile -s time scripts/start_server.py\n\n# Check database slow queries\n# Enable in postgresql.conf: log_min_duration_statement = 1000\n</code></pre></p> <p>SSL Certificate Issues <pre><code># Check certificate validity\nopenssl x509 -in /etc/letsencrypt/live/yourdomain.com/cert.pem -text -noout\n\n# Renew certificate\nsudo certbot renew\n</code></pre></p>"},{"location":"setup/deployment/#maintenance-procedures","title":"Maintenance Procedures","text":""},{"location":"setup/deployment/#regular-updates","title":"Regular Updates","text":"<pre><code># Update application\ncd /opt/sphereconnect\ngit pull origin main\nsudo systemctl restart sphereconnect\n\n# Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo reboot  # if kernel updated\n</code></pre>"},{"location":"setup/deployment/#log-analysis","title":"Log Analysis","text":"<pre><code># View recent logs\nsudo journalctl -u sphereconnect -f\n\n# Search for errors\nsudo journalctl -u sphereconnect | grep ERROR\n\n# Log analysis with goaccess (if using nginx)\ngoaccess /var/log/nginx/access.log\n</code></pre> <p>This deployment guide provides a production-ready setup with security, monitoring, and scalability considerations. Adjust configurations based on your specific infrastructure and requirements.</p>"},{"location":"setup/installation/","title":"Installation Guide","text":"<p>This guide covers the installation and initial setup of SphereConnect for development and production environments.</p>"},{"location":"setup/installation/#system-requirements","title":"System Requirements","text":""},{"location":"setup/installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Operating System: Windows 10/11, macOS 10.15+, Ubuntu 18.04+</li> <li>Python: 3.9 or higher</li> <li>Memory: 4GB RAM</li> <li>Storage: 2GB free space</li> <li>Database: PostgreSQL 12+</li> </ul>"},{"location":"setup/installation/#recommended-requirements","title":"Recommended Requirements","text":"<ul> <li>Operating System: Windows 11, macOS 12+, Ubuntu 20.04+</li> <li>Python: 3.11 or higher</li> <li>Memory: 8GB RAM</li> <li>Storage: 5GB free space</li> <li>Database: PostgreSQL 15+</li> </ul>"},{"location":"setup/installation/#backend-installation","title":"Backend Installation","text":""},{"location":"setup/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/your-org/sphereconnect.git\ncd sphereconnect\n</code></pre>"},{"location":"setup/installation/#2-create-virtual-environment","title":"2. Create Virtual Environment","text":"<pre><code># Windows\npython -m venv venv\nvenv\\Scripts\\activate\n\n# macOS/Linux\npython -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"setup/installation/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"setup/installation/#4-database-setup","title":"4. Database Setup","text":"<pre><code># Install PostgreSQL (Ubuntu/Debian)\nsudo apt update\nsudo apt install postgresql postgresql-contrib\n\n# Install PostgreSQL (macOS with Homebrew)\nbrew install postgresql\nbrew services start postgresql\n\n# Install PostgreSQL (Windows)\n# Download from https://www.postgresql.org/download/windows/\n</code></pre>"},{"location":"setup/installation/#5-create-database","title":"5. Create Database","text":"<pre><code># Create database\ncreatedb sphereconnect\n\n# Or using psql\npsql -U postgres -c \"CREATE DATABASE sphereconnect;\"\n</code></pre>"},{"location":"setup/installation/#6-environment-configuration","title":"6. Environment Configuration","text":"<p>Create <code>.env.local</code> file: <pre><code># Database Configuration\nDB_USER=postgres\nDB_PASS=your_password_here\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=sphereconnect\n\n# JWT Configuration\nJWT_SECRET_KEY=your-production-secret-key-here\nJWT_ALGORITHM=HS256\nJWT_ACCESS_TOKEN_EXPIRE_MINUTES=30\n\n# Email Configuration (optional)\nEMAIL_USER=your-email@gmail.com\nEMAIL_PASS=your-app-password\n\n# Other settings\nSECRET_KEY=your-secret-key-here\n</code></pre></p>"},{"location":"setup/installation/#7-initialize-database","title":"7. Initialize Database","text":"<pre><code># Run database initialization script\npython scripts/db_init.py\n\n# Create test data (optional)\npython scripts/test_data.py\n</code></pre>"},{"location":"setup/installation/#frontend-installation","title":"Frontend Installation","text":""},{"location":"setup/installation/#1-navigate-to-frontend-directory","title":"1. Navigate to Frontend Directory","text":"<pre><code>cd frontend\n</code></pre>"},{"location":"setup/installation/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"setup/installation/#3-start-development-server","title":"3. Start Development Server","text":"<pre><code>npm start\n</code></pre> <p>The frontend will be available at <code>http://localhost:3000</code>.</p>"},{"location":"setup/installation/#wingman-ai-setup","title":"Wingman-AI Setup","text":""},{"location":"setup/installation/#1-install-wingman-ai","title":"1. Install Wingman-AI","text":"<p>Download and install Wingman-AI from the official repository.</p>"},{"location":"setup/installation/#2-configure-custom-skill","title":"2. Configure Custom Skill","text":"<ul> <li>Copy the skill files from <code>wingman-ai/skills/sphereconnect/</code> to your Wingman-AI skills directory</li> <li>Update skill configuration with your API endpoints</li> </ul>"},{"location":"setup/installation/#3-test-voice-integration","title":"3. Test Voice Integration","text":"<pre><code>python scripts/test_standalone.py\n</code></pre>"},{"location":"setup/installation/#production-deployment","title":"Production Deployment","text":""},{"location":"setup/installation/#using-docker-recommended","title":"Using Docker (Recommended)","text":"<pre><code># Build and run with Docker Compose\ndocker-compose up -d\n</code></pre>"},{"location":"setup/installation/#manual-production-setup","title":"Manual Production Setup","text":"<pre><code># Install production WSGI server\npip install gunicorn\n\n# Run with Gunicorn\ngunicorn -w 4 -b 0.0.0.0:8000 app.main:app\n\n# Or use the start script\npython scripts/start_server.py\n</code></pre>"},{"location":"setup/installation/#verification","title":"Verification","text":""},{"location":"setup/installation/#backend-tests","title":"Backend Tests","text":"<pre><code># Run all tests\npython -m pytest tests/\n\n# Run specific test\npython -m pytest tests/test_auth.py -v\n</code></pre>"},{"location":"setup/installation/#api-health-check","title":"API Health Check","text":"<pre><code>curl http://localhost:8000/health\n</code></pre>"},{"location":"setup/installation/#database-connection","title":"Database Connection","text":"<pre><code>python -c \"from app.core.models import engine; print('Database connected successfully')\"\n</code></pre>"},{"location":"setup/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup/installation/#common-issues","title":"Common Issues","text":"<p>Database Connection Failed - Verify PostgreSQL is running - Check credentials in <code>.env.local</code> - Ensure database exists</p> <p>Import Errors - Activate virtual environment - Reinstall dependencies: <code>pip install -r requirements.txt</code></p> <p>Port Already in Use - Change port in configuration - Kill existing processes: <code>lsof -ti:8000 | xargs kill</code></p> <p>Wingman-AI Not Responding - Check skill configuration - Verify API endpoints are accessible - Review Wingman-AI logs</p>"},{"location":"setup/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation: 1. Configure your environment 2. Read the user manual 3. Explore API documentation</p>"},{"location":"tools/purge-script/","title":"SphereConnect Test Data Purge Script","text":""},{"location":"tools/purge-script/#overview","title":"Overview","text":"<p>The <code>scripts/purge_test_data.py</code> script safely removes all test data created by <code>scripts/test_data.py</code> from the PostgreSQL database. It respects foreign key constraints by deleting data in the correct order.</p>"},{"location":"tools/purge-script/#features","title":"Features","text":"<ul> <li>\u2705 Safe Deletion: Respects foreign key constraints</li> <li>\u2705 PostgreSQL Integration: Uses <code>.env.local</code> configuration</li> <li>\u2705 Confirmation Prompts: Prevents accidental data loss</li> <li>\u2705 Dry Run Mode: Preview what would be deleted</li> <li>\u2705 Force Mode: Skip confirmations for automation</li> <li>\u2705 Comprehensive Logging: Clear status messages</li> </ul>"},{"location":"tools/purge-script/#usage","title":"Usage","text":""},{"location":"tools/purge-script/#basic-usage-interactive-mode","title":"Basic Usage (Interactive Mode)","text":"<pre><code>python scripts/purge_test_data.py\n</code></pre>"},{"location":"tools/purge-script/#skip-confirmation-prompts","title":"Skip Confirmation Prompts","text":"<pre><code>python scripts/purge_test_data.py --force\n</code></pre>"},{"location":"tools/purge-script/#preview-what-would-be-deleted","title":"Preview What Would Be Deleted","text":"<pre><code>python scripts/purge_test_data.py --dry-run\n</code></pre>"},{"location":"tools/purge-script/#get-help","title":"Get Help","text":"<pre><code>python scripts/purge_test_data.py --help\n</code></pre>"},{"location":"tools/purge-script/#what-gets-purged","title":"What Gets Purged","text":"<p>The script identifies and deletes test data by these criteria:</p> <ul> <li>Guilds: Named \"Test UEE Fleet\"</li> <li>AI Commanders: Named \"UEE Commander\" (associated with test guilds)</li> <li>Objectives: Named \"Collect 500 SCU Gold\" (associated with test guilds)</li> <li>Tasks: Named \"Scout Route\" (associated with test objectives)</li> </ul>"},{"location":"tools/purge-script/#deletion-order","title":"Deletion Order","text":"<p>To respect foreign key constraints, data is deleted in this order:</p> <ol> <li>Tasks (no dependencies)</li> <li>Objectives (depend on guilds)</li> <li>AI Commanders (depend on guilds)</li> <li>Guilds (depend on nothing)</li> </ol>"},{"location":"tools/purge-script/#safety-features","title":"Safety Features","text":""},{"location":"tools/purge-script/#confirmation-prompts","title":"Confirmation Prompts","text":"<p>By default, the script asks for confirmation before deleting any data:</p> <pre><code>\u26a0\ufe0f  WARNING: This will permanently delete 32 test data items!\nThis action cannot be undone.\n\nAre you sure you want to continue? (yes/no):\n</code></pre>"},{"location":"tools/purge-script/#dry-run-mode","title":"Dry Run Mode","text":"<p>Use <code>--dry-run</code> to see what would be deleted without actually deleting:</p> <pre><code>python scripts/purge_test_data.py --dry-run\n</code></pre>"},{"location":"tools/purge-script/#force-mode","title":"Force Mode","text":"<p>Use <code>--force</code> to skip confirmations (useful for automation):</p> <pre><code>python scripts/purge_test_data.py --force\n</code></pre>"},{"location":"tools/purge-script/#environment-configuration","title":"Environment Configuration","text":"<p>The script automatically loads database configuration from <code>.env.local</code>:</p> <pre><code># Database Connection\nDB_USER=postgres\nDB_PASS=your_password_here\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=sphereconnect\n</code></pre>"},{"location":"tools/purge-script/#example-output","title":"Example Output","text":""},{"location":"tools/purge-script/#dry-run-mode_1","title":"Dry Run Mode","text":"<pre><code>\ud83e\uddf9 SphereConnect Test Data Purge Script\n==================================================\n\ud83d\udccb DRY RUN MODE - No data will actually be deleted\n\n============================================================\nFOUND TEST DATA TO PURGE\n============================================================\n\n\ud83d\udcc1 GUILDS: 8 items\n  1. Test UEE Fleet (ID: bd7b3bd1-68fe-4b09-b9d8-f5bfb199ea2d)\n\n\ud83d\udcc1 COMMANDERS: 8 items\n  1. UEE Commander (ID: 4e3ac9a2-ddd6-4bae-98d4-e8780694d4d0)\n\n\ud83d\udcc1 OBJECTIVES: 8 items\n  1. Collect 500 SCU Gold (ID: 2f3b5acc-b420-4a60-ac48-e923f89a186a)\n\n\ud83d\udcc1 TASKS: 8 items\n  1. Scout Route (ID: aa0e062f-0fbd-43a9-820b-ba6ceb3b41fa)\n\n\ud83d\udcca Total items to delete: 32\n============================================================\n\n\ud83d\udccb Starting dry run...\n\ud83d\udccb Would delete task: Scout Route (ID: aa0e062f-0fbd-43a9-820b-ba6ceb3b41fa)\n\ud83d\udccb Would delete objective: Collect 500 SCU Gold (ID: 2f3b5acc-b420-4a60-ac48-e923f89a186a)\n\ud83d\udccb Would delete AI Commander: UEE Commander (ID: 4e3ac9a2-ddd6-4bae-98d4-e8780694d4d0)\n\ud83d\udccb Would delete guild: Test UEE Fleet (ID: bd7b3bd1-68fe-4b09-b9d8-f5bfb199ea2d)\n...\n</code></pre>"},{"location":"tools/purge-script/#actual-purge","title":"Actual Purge","text":"<pre><code>\ud83d\uddd1\ufe0f  Starting purge...\n\u2713 Deleted task: Scout Route (ID: aa0e062f-0fbd-43a9-820b-ba6ceb3b41fa)\n\u2713 Deleted objective: Collect 500 SCU Gold (ID: 2f3b5acc-b420-4a60-ac48-e923f89a186a)\n\u2713 Deleted AI Commander: UEE Commander (ID: 4e3ac9a2-ddd6-4bae-98d4-e8780694d4d0)\n\u2713 Deleted guild: Test UEE Fleet (ID: bd7b3bd1-68fe-4b09-b9d8-f5bfb199ea2d)\n...\n\n\u2705 Successfully deleted 32 test data items!\n</code></pre>"},{"location":"tools/purge-script/#error-handling","title":"Error Handling","text":"<p>The script includes comprehensive error handling:</p> <ul> <li>Database Connection Errors: Clear error messages for connection issues</li> <li>Foreign Key Violations: Proper transaction rollback on errors</li> <li>Permission Errors: Informative messages for access issues</li> <li>Missing Environment: Graceful fallback to default settings</li> </ul>"},{"location":"tools/purge-script/#integration-with-development-workflow","title":"Integration with Development Workflow","text":""},{"location":"tools/purge-script/#typical-development-cycle","title":"Typical Development Cycle","text":"<pre><code># Create test data\npython scripts/test_data.py\n\n# Run tests or development work\n# ... your development tasks ...\n\n# Clean up test data\npython scripts/purge_test_data.py --force\n\n# Verify cleanup\npython scripts/purge_test_data.py --dry-run\n</code></pre>"},{"location":"tools/purge-script/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># In your CI/CD pipeline\npython scripts/test_data.py\npython -m pytest tests/\npython scripts/purge_test_data.py --force\n</code></pre>"},{"location":"tools/purge-script/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tools/purge-script/#no-test-data-found","title":"No Test Data Found","text":"<p>If the script reports \"No test data found,\" it means: - No test data was created, or - Test data was already purged, or - Database connection is incorrect</p>"},{"location":"tools/purge-script/#permission-denied","title":"Permission Denied","text":"<p>If you get permission errors: - Check your PostgreSQL user permissions - Verify <code>.env.local</code> credentials - Ensure database exists and is accessible</p>"},{"location":"tools/purge-script/#foreign-key-errors","title":"Foreign Key Errors","text":"<p>If foreign key errors occur: - The script handles this automatically with rollbacks - Check database schema for constraint issues - Ensure no external references to test data exist</p>"},{"location":"tools/purge-script/#file-structure","title":"File Structure","text":"<pre><code>purge_test_data.py          # Main purge script\nPURGE_README.md            # This documentation\n.env.local                 # Database configuration\napp/\n  core/\n    models.py             # Database models\n</code></pre>"},{"location":"tools/purge-script/#success-metrics","title":"\ud83c\udfaf Success Metrics","text":"<p>\u2705 Safe Deletion: Respects all foreign key constraints \u2705 Zero Data Loss: Only deletes intended test data \u2705 PostgreSQL Compatible: Full support for PostgreSQL \u2705 User-Friendly: Clear prompts and confirmations \u2705 Automation Ready: Supports both interactive and automated usage</p> <p>The purge script is production-ready and ensures clean database state for development and testing! \ud83d\ude80</p>"},{"location":"user-manual/getting-started/","title":"Getting Started","text":"<p>Welcome to SphereConnect! This guide will help you get started with using the platform for your Star Citizen guild coordination.</p>"},{"location":"user-manual/getting-started/#what-is-sphereconnect","title":"What is SphereConnect?","text":"<p>SphereConnect is an AI-powered coordination platform designed specifically for Star Citizen guilds. It provides:</p> <ul> <li>Voice-driven commands via Wingman-AI integration</li> <li>Real-time objective tracking and task management</li> <li>Multi-tenant architecture for secure guild isolation</li> <li>Web interface for comprehensive management</li> <li>Push notifications for important updates</li> </ul>"},{"location":"user-manual/getting-started/#quick-start-for-guild-leaders","title":"Quick Start for Guild Leaders","text":""},{"location":"user-manual/getting-started/#1-account-setup","title":"1. Account Setup","text":""},{"location":"user-manual/getting-started/#create-your-guild","title":"Create Your Guild","text":"<ol> <li>Visit the SphereConnect web interface</li> <li>Click \"Register New Guild\"</li> <li>Fill in your guild details:</li> <li>Guild name</li> <li>Description</li> <li>Contact information</li> </ol>"},{"location":"user-manual/getting-started/#create-your-account","title":"Create Your Account","text":"<ol> <li>Use the registration form</li> <li>Set a strong password</li> <li>Configure your 6-digit PIN for voice authentication</li> <li>Set your phonetic name for voice recognition</li> </ol>"},{"location":"user-manual/getting-started/#2-configure-your-ai-commander","title":"2. Configure Your AI Commander","text":"<p>Each guild has a customizable AI Commander that handles voice interactions:</p> <ol> <li>Go to Guild Settings &gt; AI Commander</li> <li>Customize the personality:</li> <li>Name (default: \"UEE Commander\")</li> <li>System prompt for behavior</li> <li>User prompt for tone</li> <li>Test the voice integration</li> </ol>"},{"location":"user-manual/getting-started/#3-set-up-ranks-and-access-levels","title":"3. Set Up Ranks and Access Levels","text":""},{"location":"user-manual/getting-started/#create-rank-hierarchy","title":"Create Rank Hierarchy","text":"<ol> <li>Navigate to Administration &gt; Ranks</li> <li>Define your military-style hierarchy:</li> <li>Recruit</li> <li>NCO (Non-Commissioned Officer)</li> <li>Officer</li> <li>Command</li> </ol>"},{"location":"user-manual/getting-started/#configure-access-levels","title":"Configure Access Levels","text":"<ol> <li>Go to Administration &gt; Access Levels</li> <li>Create permission groups:</li> <li>Basic (view objectives)</li> <li>Member (create tasks)</li> <li>Officer (manage objectives)</li> <li>Admin (full access)</li> </ol>"},{"location":"user-manual/getting-started/#4-create-your-first-objective","title":"4. Create Your First Objective","text":""},{"location":"user-manual/getting-started/#using-the-web-interface","title":"Using the Web Interface","text":"<ol> <li>Go to Objectives &gt; Create New</li> <li>Fill in objective details:</li> <li>Name: \"Secure Trade Route Alpha\"</li> <li>Description: Brief, tactical, classified sections</li> <li>Category: Economy</li> <li>Priority: High</li> <li>Applicable rank: NCO and above</li> </ol>"},{"location":"user-manual/getting-started/#using-voice-commands","title":"Using Voice Commands","text":"<p>Speak to your AI Commander:</p> <p>\"UEE Commander, create objective: Secure Trade Route Alpha for economic protection\"</p>"},{"location":"user-manual/getting-started/#quick-start-for-members","title":"Quick Start for Members","text":""},{"location":"user-manual/getting-started/#1-join-your-guild","title":"1. Join Your Guild","text":""},{"location":"user-manual/getting-started/#get-invited","title":"Get Invited","text":"<ul> <li>Your guild leader will provide an invitation link</li> <li>Or receive direct access credentials</li> </ul>"},{"location":"user-manual/getting-started/#complete-registration","title":"Complete Registration","text":"<ol> <li>Use the invitation link</li> <li>Create your account with:</li> <li>Username and password</li> <li>6-digit PIN for voice commands</li> <li>Phonetic name for recognition</li> </ol>"},{"location":"user-manual/getting-started/#2-set-up-voice-integration","title":"2. Set Up Voice Integration","text":""},{"location":"user-manual/getting-started/#install-wingman-ai","title":"Install Wingman-AI","text":"<ol> <li>Download Wingman-AI from the official repository</li> <li>Install the SphereConnect skill</li> <li>Configure your microphone and speakers</li> </ol>"},{"location":"user-manual/getting-started/#test-voice-commands","title":"Test Voice Commands","text":"<p>Try these basic commands:</p> <p>\"UEE Commander, what objectives are available?\" \"UEE Commander, authenticate with PIN 123456\"</p>"},{"location":"user-manual/getting-started/#3-explore-the-interface","title":"3. Explore the Interface","text":""},{"location":"user-manual/getting-started/#web-dashboard","title":"Web Dashboard","text":"<ul> <li>Objectives Tab: View available missions</li> <li>Tasks Tab: See your assignments</li> <li>Profile Tab: Manage your settings</li> </ul>"},{"location":"user-manual/getting-started/#voice-commands","title":"Voice Commands","text":"<p>Common voice interactions: - Check objectives: \"What missions are active?\" - Accept tasks: \"Assign me to Scout Route task\" - Report progress: \"Completed delivery of 100 SCU Gold\" - Get status: \"What's my current assignment?\"</p>"},{"location":"user-manual/getting-started/#core-concepts","title":"Core Concepts","text":""},{"location":"user-manual/getting-started/#objectives","title":"Objectives","text":"<p>Objectives are your guild's missions or goals. They contain: - Brief: High-level description - Tactical: Detailed execution plan - Classified: Sensitive information (rank-restricted) - Metrics: Success criteria (e.g., \"Deliver 500 SCU Gold\")</p>"},{"location":"user-manual/getting-started/#tasks","title":"Tasks","text":"<p>Tasks are specific actions within objectives: - Sub-components of larger missions - Assignable to specific users or squads - Schedulable with flexible timing - Trackable with progress updates</p>"},{"location":"user-manual/getting-started/#squads","title":"Squads","text":"<p>Squads are groups for coordinated operations: - Ad-hoc creation via voice commands - Automatic assignment based on skills - Filtered communications for focused coordination</p>"},{"location":"user-manual/getting-started/#ranks-and-permissions","title":"Ranks and Permissions","text":"<ul> <li>Hierarchical access to information</li> <li>Role-based permissions for actions</li> <li>Security classification for sensitive data</li> </ul>"},{"location":"user-manual/getting-started/#voice-command-examples","title":"Voice Command Examples","text":""},{"location":"user-manual/getting-started/#objective-management","title":"Objective Management","text":"<pre><code>\"Create objective: Mine 1000 SCU Quantanium in Crusader\"\n\"Update objective: Add tactical details for mining operation\"\n\"Show me objectives for my rank\"\n</code></pre>"},{"location":"user-manual/getting-started/#task-management","title":"Task Management","text":"<pre><code>\"Assign task Scout Route to Pilot Johnson\"\n\"Schedule task Mining Run for 30 minutes from now\"\n\"Mark task completed: Delivered 500 SCU Gold\"\n</code></pre>"},{"location":"user-manual/getting-started/#status-and-information","title":"Status and Information","text":"<pre><code>\"What objectives are available?\"\n\"What's my current squad assignment?\"\n\"Show progress on Trade Route Security objective\"\n</code></pre>"},{"location":"user-manual/getting-started/#administrative-officer","title":"Administrative (Officer+)","text":"<pre><code>\"Promote user Johnson to NCO rank\"\n\"Create new squad: Mining Team Alpha\"\n\"Set objective priority to critical\"\n</code></pre>"},{"location":"user-manual/getting-started/#best-practices","title":"Best Practices","text":""},{"location":"user-manual/getting-started/#for-guild-leaders","title":"For Guild Leaders","text":"<ol> <li>Start Small: Begin with 1-2 objectives to test workflows</li> <li>Define Clear Ranks: Establish clear hierarchies early</li> <li>Train Members: Provide voice command tutorials</li> <li>Regular Reviews: Weekly objective progress reviews</li> <li>Feedback Loops: Collect member feedback for improvements</li> </ol>"},{"location":"user-manual/getting-started/#for-members","title":"For Members","text":"<ol> <li>Keep PIN Secure: Never share your voice authentication PIN</li> <li>Update Availability: Use voice commands to set your status</li> <li>Report Progress: Regularly update task completion</li> <li>Use Voice Efficiently: Practice common commands</li> <li>Check Notifications: Stay updated on objective changes</li> </ol>"},{"location":"user-manual/getting-started/#voice-interaction-tips","title":"Voice Interaction Tips","text":"<ul> <li>Speak clearly and at normal volume</li> <li>Use full sentences for complex commands</li> <li>Wait for confirmation before proceeding</li> <li>Test commands in quiet environments first</li> <li>Use phonetic names consistently</li> </ul>"},{"location":"user-manual/getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-manual/getting-started/#voice-commands-not-working","title":"Voice Commands Not Working","text":"<ul> <li>Check microphone permissions</li> <li>Verify Wingman-AI is running</li> <li>Test with simple commands first</li> <li>Check voice skill configuration</li> </ul>"},{"location":"user-manual/getting-started/#cannot-access-objectives","title":"Cannot Access Objectives","text":"<ul> <li>Verify your rank permissions</li> <li>Check if objective is rank-restricted</li> <li>Contact your guild leader for access</li> </ul>"},{"location":"user-manual/getting-started/#web-interface-issues","title":"Web Interface Issues","text":"<ul> <li>Clear browser cache</li> <li>Try different browser</li> <li>Check internet connection</li> <li>Contact support if persistent</li> </ul>"},{"location":"user-manual/getting-started/#authentication-problems","title":"Authentication Problems","text":"<ul> <li>Reset password through web interface</li> <li>Regenerate PIN if compromised</li> <li>Check account lockout status</li> </ul>"},{"location":"user-manual/getting-started/#getting-help","title":"Getting Help","text":""},{"location":"user-manual/getting-started/#documentation-resources","title":"Documentation Resources","text":"<ul> <li>Voice Commands Guide - Complete command reference</li> <li>Web Interface Guide - Dashboard tutorial</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"user-manual/getting-started/#community-support","title":"Community Support","text":"<ul> <li>Guild leadership for specific questions</li> <li>GitHub issues for technical problems</li> <li>Community forums for tips and tricks</li> </ul>"},{"location":"user-manual/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you're set up: 1. Learn advanced voice commands 2. Explore the web interface 3. Join your first objective 4. Contribute to your guild's success</p> <p>Welcome to the UEE Navy - your coordination starts now!</p>"},{"location":"user-manual/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you resolve common issues with SphereConnect. Start with the most relevant section based on your problem.</p>"},{"location":"user-manual/troubleshooting/#voice-command-issues","title":"Voice Command Issues","text":""},{"location":"user-manual/troubleshooting/#commands-not-recognized","title":"Commands Not Recognized","text":"<p>Symptoms: - Voice commands return \"Command not understood\" - No response from AI Commander - Wingman-AI shows processing but no action</p> <p>Solutions: 1. Check Microphone Setup    - Ensure microphone is enabled in system settings    - Test microphone in Windows Sound settings    - Verify Wingman-AI has microphone access</p> <ol> <li>Verify Command Syntax</li> <li>Use exact patterns from the voice commands guide</li> <li>Speak clearly and at normal volume</li> <li> <p>Try simpler commands first</p> </li> <li> <p>Check Wingman-AI Status</p> </li> <li>Restart Wingman-AI application</li> <li>Verify SphereConnect skill is loaded</li> <li> <p>Check skill configuration in Wingman-AI settings</p> </li> <li> <p>Test API Connectivity <pre><code>curl http://localhost:8000/health\n</code></pre></p> </li> <li>Should return <code>{\"status\": \"healthy\"}</code></li> </ol>"},{"location":"user-manual/troubleshooting/#authentication-failures","title":"Authentication Failures","text":"<p>Symptoms: - \"Authentication required\" responses - PIN verification fails - Voice commands blocked</p> <p>Solutions: 1. Verify PIN    - Check PIN in your profile settings    - Ensure 6-digit format    - Try resetting PIN through web interface</p> <ol> <li>Check Account Status</li> <li>Verify account is not locked</li> <li>Confirm rank permissions for command</li> <li> <p>Check if guild membership is active</p> </li> <li> <p>Session Issues</p> </li> <li>Log out and log back in</li> <li>Clear browser cache</li> <li>Try different browser</li> </ol>"},{"location":"user-manual/troubleshooting/#poor-voice-recognition","title":"Poor Voice Recognition","text":"<p>Symptoms: - Commands misinterpret words - Names not recognized correctly - Numbers heard incorrectly</p> <p>Solutions: 1. Improve Audio Quality    - Use wired microphone over wireless    - Reduce background noise    - Speak closer to microphone</p> <ol> <li>Update Pronunciation</li> <li>Set phonetic name in profile</li> <li>Use consistent nicknames</li> <li> <p>Avoid similar-sounding names</p> </li> <li> <p>Environment Factors</p> </li> <li>Test in quiet room</li> <li>Close noise-making applications</li> <li>Update audio drivers</li> </ol>"},{"location":"user-manual/troubleshooting/#web-interface-problems","title":"Web Interface Problems","text":""},{"location":"user-manual/troubleshooting/#login-issues","title":"Login Issues","text":"<p>Symptoms: - Cannot log into web interface - \"Invalid credentials\" error - Account appears locked</p> <p>Solutions: 1. Credential Verification    - Reset password if forgotten    - Check username/guild combination    - Verify account activation</p> <ol> <li>Account Lockout</li> <li>Wait 15 minutes for automatic unlock</li> <li>Contact administrator for manual unlock</li> <li> <p>Check failed attempt history</p> </li> <li> <p>Browser Issues</p> </li> <li>Clear browser cache and cookies</li> <li>Try incognito/private mode</li> <li>Update browser to latest version</li> </ol>"},{"location":"user-manual/troubleshooting/#page-loading-problems","title":"Page Loading Problems","text":"<p>Symptoms: - Interface doesn't load - Blank pages or error messages - Slow performance</p> <p>Solutions: 1. Network Connectivity    - Check internet connection    - Verify firewall settings    - Try different network</p> <ol> <li>Browser Compatibility</li> <li>Use Chrome, Firefox, or Edge</li> <li>Disable browser extensions</li> <li> <p>Clear cache and cookies</p> </li> <li> <p>Server Status</p> </li> <li>Check system status page</li> <li>Verify API endpoints</li> <li>Contact administrator if down</li> </ol>"},{"location":"user-manual/troubleshooting/#feature-access-denied","title":"Feature Access Denied","text":"<p>Symptoms: - Buttons disabled or hidden - \"Permission denied\" messages - Cannot access certain sections</p> <p>Solutions: 1. Check Permissions    - Verify your rank level    - Confirm access level assignments    - Check objective rank restrictions</p> <ol> <li>Account Status</li> <li>Ensure account is active</li> <li>Verify guild membership</li> <li>Check for administrative blocks</li> </ol>"},{"location":"user-manual/troubleshooting/#api-and-integration-issues","title":"API and Integration Issues","text":""},{"location":"user-manual/troubleshooting/#wingman-ai-connection","title":"Wingman-AI Connection","text":"<p>Symptoms: - Voice commands don't reach server - API timeout errors - Integration status shows offline</p> <p>Solutions: 1. Configuration Check <pre><code># Verify config in wingman-ai/configs/_SphereConnect/\napi_endpoint: \"http://localhost:8000\"\n</code></pre></p> <ol> <li>Port Accessibility</li> <li>Ensure port 8000 is not blocked</li> <li>Check firewall rules</li> <li> <p>Verify server is running</p> </li> <li> <p>Skill Installation</p> </li> <li>Reinstall SphereConnect skill</li> <li>Update Wingman-AI to latest version</li> <li>Check skill logs for errors</li> </ol>"},{"location":"user-manual/troubleshooting/#database-connection","title":"Database Connection","text":"<p>Symptoms: - Operations fail with database errors - Slow response times - Connection timeout messages</p> <p>Solutions: 1. Database Status <pre><code># Check PostgreSQL status\nsudo systemctl status postgresql\n\n# Test connection\npsql -U sphereconnect -d sphereconnect -c \"SELECT 1;\"\n</code></pre></p> <ol> <li>Connection Pool</li> <li>Check for connection leaks</li> <li>Restart application server</li> <li> <p>Monitor connection count</p> </li> <li> <p>Configuration</p> </li> <li>Verify DATABASE_URL in environment</li> <li>Check database credentials</li> <li>Ensure database exists</li> </ol>"},{"location":"user-manual/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"user-manual/troubleshooting/#slow-response-times","title":"Slow Response Times","text":"<p>Symptoms: - Voice commands take &gt;2 seconds - Web interface lags - Operations timeout</p> <p>Solutions: 1. System Resources    - Check CPU/memory usage    - Close unnecessary applications    - Monitor system performance</p> <ol> <li>Database Optimization</li> <li>Check for slow queries</li> <li>Verify index usage</li> <li> <p>Consider database tuning</p> </li> <li> <p>Network Latency</p> </li> <li>Test local vs remote access</li> <li>Check network speed</li> <li>Use wired connection</li> </ol>"},{"location":"user-manual/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Symptoms: - Application crashes - Out of memory errors - System slowdown</p> <p>Solutions: 1. Resource Monitoring <pre><code># Check memory usage\nhtop\nfree -h\n</code></pre></p> <ol> <li>Configuration Tuning</li> <li>Adjust worker process count</li> <li>Increase system memory</li> <li> <p>Optimize database connections</p> </li> <li> <p>Application Restart</p> </li> <li>Restart services</li> <li>Clear temporary files</li> <li>Check for memory leaks</li> </ol>"},{"location":"user-manual/troubleshooting/#data-and-synchronization-issues","title":"Data and Synchronization Issues","text":""},{"location":"user-manual/troubleshooting/#missing-data","title":"Missing Data","text":"<p>Symptoms: - Objectives/tasks not appearing - User data lost - Synchronization failures</p> <p>Solutions: 1. Data Integrity    - Check database for corruption    - Verify foreign key constraints    - Run data validation scripts</p> <ol> <li>Cache Issues</li> <li>Clear application cache</li> <li>Restart services</li> <li> <p>Check Redis if used</p> </li> <li> <p>Backup Recovery</p> </li> <li>Restore from recent backup</li> <li>Verify backup integrity</li> <li>Contact administrator</li> </ol>"},{"location":"user-manual/troubleshooting/#synchronization-problems","title":"Synchronization Problems","text":"<p>Symptoms: - Data not syncing between devices - Voice commands not reflected in web - Real-time updates missing</p> <p>Solutions: 1. WebSocket Connection    - Check WebSocket connectivity    - Verify firewall rules    - Restart WebSocket service</p> <ol> <li>Cache Invalidation</li> <li>Clear browser cache</li> <li>Force page refresh</li> <li>Check cache configuration</li> </ol>"},{"location":"user-manual/troubleshooting/#security-and-access-issues","title":"Security and Access Issues","text":""},{"location":"user-manual/troubleshooting/#mfa-problems","title":"MFA Problems","text":"<p>Symptoms: - Cannot set up TOTP - Authenticator app not working - MFA verification fails</p> <p>Solutions: 1. TOTP Setup    - Scan QR code correctly    - Check time synchronization    - Try different authenticator app</p> <ol> <li>Backup Codes</li> <li>Generate backup codes</li> <li>Store securely</li> <li>Use for account recovery</li> </ol>"},{"location":"user-manual/troubleshooting/#permission-errors","title":"Permission Errors","text":"<p>Symptoms: - Access denied to features - Rank-based restrictions not working - Administrative commands blocked</p> <p>Solutions: 1. Role Verification    - Check assigned ranks    - Verify access level permissions    - Contact administrator for changes</p> <ol> <li>Session Issues</li> <li>Log out and log back in</li> <li>Clear session data</li> <li>Check token expiration</li> </ol>"},{"location":"user-manual/troubleshooting/#mobile-and-cross-platform-issues","title":"Mobile and Cross-Platform Issues","text":""},{"location":"user-manual/troubleshooting/#mobile-app-problems","title":"Mobile App Problems","text":"<p>Symptoms: - App crashes on mobile - Features not working on phone - Synchronization issues</p> <p>Solutions: 1. App Updates    - Update to latest version    - Clear app cache    - Reinstall if necessary</p> <ol> <li>Permissions</li> <li>Grant microphone/camera access</li> <li>Enable notifications</li> <li>Check location permissions</li> </ol>"},{"location":"user-manual/troubleshooting/#cross-browser-issues","title":"Cross-Browser Issues","text":"<p>Symptoms: - Works in one browser, not another - Features missing in certain browsers</p> <p>Solutions: 1. Browser Updates    - Update to latest version    - Enable JavaScript    - Clear browser data</p> <ol> <li>Compatibility Mode</li> <li>Test in multiple browsers</li> <li>Use supported browsers</li> <li>Check browser console for errors</li> </ol>"},{"location":"user-manual/troubleshooting/#advanced-troubleshooting","title":"Advanced Troubleshooting","text":""},{"location":"user-manual/troubleshooting/#log-analysis","title":"Log Analysis","text":"<p>Server Logs <pre><code># View application logs\ntail -f /var/log/sphereconnect/app.log\n\n# Check for errors\ngrep ERROR /var/log/sphereconnect/app.log\n</code></pre></p> <p>Wingman-AI Logs - Check Wingman-AI log directory - Look for API connection errors - Verify skill loading</p> <p>Database Logs <pre><code># PostgreSQL logs\ntail -f /var/log/postgresql/postgresql-*.log\n</code></pre></p>"},{"location":"user-manual/troubleshooting/#diagnostic-commands","title":"Diagnostic Commands","text":"<p>System Health Check <pre><code># Comprehensive health check\ncurl http://localhost:8000/health\n\n# Database connectivity\npython -c \"from app.core.models import engine; print('DB OK')\"\n\n# API endpoints\ncurl -H \"Authorization: Bearer &lt;token&gt;\" http://localhost:8000/api/objectives\n</code></pre></p> <p>Performance Monitoring <pre><code># CPU and memory\ntop -p $(pgrep -f sphereconnect)\n\n# Network connections\nnetstat -tlnp | grep :8000\n\n# Disk usage\ndf -h\ndu -sh /opt/sphereconnect\n</code></pre></p>"},{"location":"user-manual/troubleshooting/#recovery-procedures","title":"Recovery Procedures","text":"<p>Application Restart <pre><code># Systemd service\nsudo systemctl restart sphereconnect\n\n# Manual restart\npkill -f sphereconnect\npython scripts/start_server.py\n</code></pre></p> <p>Database Recovery <pre><code># Restart PostgreSQL\nsudo systemctl restart postgresql\n\n# Check database health\npsql -U postgres -c \"SELECT version();\"\n</code></pre></p> <p>Full System Reset <pre><code># Last resort - backup first!\n# Clear all data and restart\npython scripts/purge_test_data.py --force\npython scripts/db_init.py\n</code></pre></p>"},{"location":"user-manual/troubleshooting/#getting-additional-help","title":"Getting Additional Help","text":""},{"location":"user-manual/troubleshooting/#support-resources","title":"Support Resources","text":"<p>Documentation - Installation Guide - Configuration Guide - API Reference</p> <p>Community Support - Guild administrator - User forums - GitHub issues</p> <p>Professional Support - Contact development team - Enterprise support options - Consulting services</p>"},{"location":"user-manual/troubleshooting/#information-to-provide","title":"Information to Provide","text":"<p>When reporting issues, include: - Error messages (exact text) - Steps to reproduce - System information (OS, browser, versions) - Log excerpts - Screenshot if applicable</p>"},{"location":"user-manual/troubleshooting/#prevention","title":"Prevention","text":"<p>Regular Maintenance - Keep systems updated - Monitor logs regularly - Perform regular backups - Test critical workflows</p> <p>Best Practices - Use strong passwords - Enable MFA - Keep software updated - Monitor system resources</p> <p>This troubleshooting guide covers the most common issues. For persistent problems not covered here, please contact your system administrator or create a detailed issue report on GitHub.</p>"},{"location":"user-manual/voice-commands/","title":"Voice Commands Guide","text":"<p>This comprehensive guide covers all voice commands available in SphereConnect's Wingman-AI integration.</p>"},{"location":"user-manual/voice-commands/#command-structure","title":"Command Structure","text":"<p>Voice commands follow natural language patterns. The AI Commander will: - Parse your intent from spoken words - Extract relevant parameters - Execute the requested action - Provide audio confirmation</p>"},{"location":"user-manual/voice-commands/#basic-commands","title":"Basic Commands","text":""},{"location":"user-manual/voice-commands/#authentication","title":"Authentication","text":"<p><pre><code>\"UEE Commander, authenticate with PIN [6-digit code]\"\n</code></pre> - Verifies your identity for voice operations - Required before sensitive operations - PIN is your 6-digit voice access code</p>"},{"location":"user-manual/voice-commands/#status-queries","title":"Status Queries","text":"<pre><code>\"What objectives are available?\"\n\"What objectives are available for my rank?\"\n\"What tasks are assigned to me?\"\n\"What's my current status?\"\n\"What is my squad assignment?\"\n</code></pre>"},{"location":"user-manual/voice-commands/#objective-management","title":"Objective Management","text":""},{"location":"user-manual/voice-commands/#creating-objectives","title":"Creating Objectives","text":"<pre><code>\"Create objective: [objective name]\"\n\"Create objective: [name] for [category]\"\n\"Create objective: [name] with priority [high/medium/low]\"\n</code></pre> <p>Examples: - \"Create objective: Secure the trade route to Port Olisar\" - \"Create objective: Mine 1000 SCU Quantanium in Crusader\" - \"Create objective: Escort mining convoy with priority high\"</p>"},{"location":"user-manual/voice-commands/#updating-objectives","title":"Updating Objectives","text":"<pre><code>\"Update objective: [objective name] add brief [description]\"\n\"Update objective: [objective name] add tactical [details]\"\n\"Update objective: [objective name] add classified [sensitive info]\"\n\"Update objective: [objective name] set priority [level]\"\n\"Update objective: [objective name] set category [type]\"\n</code></pre> <p>Examples: - \"Update objective: Trade Route Security add brief Protect merchant vessels\" - \"Update objective: Mining Operation add tactical Use the Orion for escort\" - \"Update objective: Classified Mission add classified Coordinates: 042-051\"</p>"},{"location":"user-manual/voice-commands/#objective-queries","title":"Objective Queries","text":"<pre><code>\"Show me objective: [objective name]\"\n\"What is the status of objective: [objective name]?\"\n\"What objectives are in category: [category]?\"\n\"What objectives have priority: [level]?\"\n</code></pre>"},{"location":"user-manual/voice-commands/#task-management","title":"Task Management","text":""},{"location":"user-manual/voice-commands/#creating-tasks","title":"Creating Tasks","text":"<pre><code>\"Create task: [task name] for objective: [objective name]\"\n\"Assign task: [task name] to [user name]\"\n\"Schedule task: [task name] for [time] [unit] now\"\n\"Schedule task: [task name] for [time] [unit] from now\"\n</code></pre> <p>Time Units: minutes, hours, days Examples: - \"Create task: Scout the route for objective: Trade Route Security\" - \"Assign task: Mining Run to Johnson\" - \"Schedule task: Escort Duty for 30 minutes now\" - \"Schedule task: Patrol Route for 2 hours from now\"</p>"},{"location":"user-manual/voice-commands/#task-updates","title":"Task Updates","text":"<pre><code>\"Update task: [task name] set status [status]\"\n\"Mark task: [task name] as completed\"\n\"Mark task: [task name] as in progress\"\n\"Update task: [task name] add progress [description]\"\n</code></pre> <p>Status Options: pending, in progress, completed, cancelled Examples: - \"Update task: Scout Route set status in progress\" - \"Mark task: Mining Run as completed\" - \"Update task: Escort Duty add progress 50% complete\"</p>"},{"location":"user-manual/voice-commands/#task-queries","title":"Task Queries","text":"<pre><code>\"What tasks are assigned to me?\"\n\"What tasks are for objective: [objective name]?\"\n\"What is the status of task: [task name]?\"\n\"What tasks are due today?\"\n\"What tasks are overdue?\"\n</code></pre>"},{"location":"user-manual/voice-commands/#progress-reporting","title":"Progress Reporting","text":""},{"location":"user-manual/voice-commands/#resource-delivery","title":"Resource Delivery","text":"<pre><code>\"Delivered [quantity] [resource] [type]\"\n\"Completed delivery of [quantity] [resource] [type]\"\n\"Delivered [quantity] SCU of [resource]\"\n</code></pre> <p>Examples: - \"Delivered 500 SCU Gold\" - \"Completed delivery of 100 SCU Quantanium\" - \"Delivered 250 SCU of Agricultural Supplies\"</p>"},{"location":"user-manual/voice-commands/#mission-progress","title":"Mission Progress","text":"<pre><code>\"Completed [task/objective name]\"\n\"Progress on [task/objective name]: [percentage]% complete\"\n\"Update progress: [description]\"\n</code></pre> <p>Examples: - \"Completed Scout Route task\" - \"Progress on Mining Operation: 75% complete\" - \"Update progress: Located rich Quantanium deposit\"</p>"},{"location":"user-manual/voice-commands/#squad-management","title":"Squad Management","text":""},{"location":"user-manual/voice-commands/#squad-creation","title":"Squad Creation","text":"<pre><code>\"Create squad: [squad name]\"\n\"Create squad: [squad name] with lead [user name]\"\n\"Form ad-hoc squad for [objective/task name]\"\n</code></pre> <p>Examples: - \"Create squad: Mining Team Alpha\" - \"Create squad: Escort Squadron with lead Johnson\" - \"Form ad-hoc squad for Trade Route Security\"</p>"},{"location":"user-manual/voice-commands/#squad-assignment","title":"Squad Assignment","text":"<pre><code>\"Assign [user name] to squad: [squad name]\"\n\"Add me to squad: [squad name]\"\n\"Remove [user name] from squad: [squad name]\"\n\"Set squad lead to [user name]\"\n</code></pre> <p>Examples: - \"Assign Martinez to squad: Mining Team Alpha\" - \"Add me to squad: Escort Squadron\" - \"Set squad lead to Commander Smith\"</p>"},{"location":"user-manual/voice-commands/#squad-queries","title":"Squad Queries","text":"<pre><code>\"What is my squad?\"\n\"Who is in squad: [squad name]?\"\n\"What squads are available?\"\n\"What is the squad lead for [squad name]?\"\n</code></pre>"},{"location":"user-manual/voice-commands/#user-management-admin-only","title":"User Management (Admin Only)","text":""},{"location":"user-manual/voice-commands/#rank-management","title":"Rank Management","text":"<pre><code>\"Promote [user name] to [rank name]\"\n\"Demote [user name] to [rank name]\"\n\"Set rank of [user name] to [rank name]\"\n</code></pre> <p>Examples: - \"Promote Johnson to NCO\" - \"Demote Martinez to Recruit\" - \"Set rank of Smith to Officer\"</p>"},{"location":"user-manual/voice-commands/#user-status","title":"User Status","text":"<pre><code>\"Set availability of [user name] to [status]\"\n\"[User name] is now [status]\"\n\"Mark [user name] as available\"\n\"Mark [user name] as unavailable\"\n</code></pre> <p>Status Options: available, busy, offline, in-game Examples: - \"Set availability of Johnson to busy\" - \"Johnson is now in-game\" - \"Mark Martinez as available\"</p>"},{"location":"user-manual/voice-commands/#administrative-commands-officer","title":"Administrative Commands (Officer+)","text":""},{"location":"user-manual/voice-commands/#system-queries","title":"System Queries","text":"<pre><code>\"How many users are online?\"\n\"What is the server status?\"\n\"Show system health\"\n\"List all active objectives\"\n\"List all active tasks\"\n</code></pre>"},{"location":"user-manual/voice-commands/#emergency-commands","title":"Emergency Commands","text":"<pre><code>\"Emergency broadcast: [message]\"\n\"Cancel all objectives\"\n\"Stand down all operations\"\n\"Emergency evacuation protocol\"\n</code></pre>"},{"location":"user-manual/voice-commands/#advanced-commands","title":"Advanced Commands","text":""},{"location":"user-manual/voice-commands/#complex-objectives","title":"Complex Objectives","text":"<pre><code>\"Create objective: [name] with tasks [task1, task2, task3]\"\n\"Create objective: [name] for squad [squad name] with deadline [time]\"\n\"Create objective: [name] requiring [skill1, skill2]\"\n</code></pre>"},{"location":"user-manual/voice-commands/#batch-operations","title":"Batch Operations","text":"<pre><code>\"Assign all mining tasks to Mining Squad\"\n\"Complete all tasks for objective: [name]\"\n\"Schedule all Escort tasks for next hour\"\n</code></pre>"},{"location":"user-manual/voice-commands/#conditional-commands","title":"Conditional Commands","text":"<pre><code>\"If [condition] then [action]\"\n\"Create objective only if no similar exists\"\n\"Assign task only if user is available\"\n</code></pre>"},{"location":"user-manual/voice-commands/#command-best-practices","title":"Command Best Practices","text":""},{"location":"user-manual/voice-commands/#speaking-clearly","title":"Speaking Clearly","text":"<ul> <li>Use full, complete sentences</li> <li>Speak at normal volume and pace</li> <li>Minimize background noise</li> <li>Use phonetic pronunciations consistently</li> </ul>"},{"location":"user-manual/voice-commands/#command-formatting","title":"Command Formatting","text":"<ul> <li>Start with \"UEE Commander\" for attention</li> <li>Use natural language patterns</li> <li>Include specific names and quantities</li> <li>End commands with clear termination</li> </ul>"},{"location":"user-manual/voice-commands/#error-handling","title":"Error Handling","text":"<ul> <li>Listen for confirmation responses</li> <li>Retry failed commands with simpler language</li> <li>Use web interface as backup for complex operations</li> <li>Report persistent issues to administrators</li> </ul>"},{"location":"user-manual/voice-commands/#voice-recognition-tips","title":"Voice Recognition Tips","text":""},{"location":"user-manual/voice-commands/#name-pronunciation","title":"Name Pronunciation","text":"<ul> <li>Set your phonetic name in profile settings</li> <li>Use consistent nicknames</li> <li>Avoid similar-sounding names in commands</li> </ul>"},{"location":"user-manual/voice-commands/#number-recognition","title":"Number Recognition","text":"<ul> <li>Speak numbers clearly: \"one two three\" vs \"123\"</li> <li>Use \"SCU\" distinctly from numbers</li> <li>Confirm large quantities in web interface</li> </ul>"},{"location":"user-manual/voice-commands/#command-chaining","title":"Command Chaining","text":"<ul> <li>Execute one command at a time</li> <li>Wait for confirmation before next command</li> <li>Use web interface for batch operations</li> </ul>"},{"location":"user-manual/voice-commands/#troubleshooting-voice-commands","title":"Troubleshooting Voice Commands","text":""},{"location":"user-manual/voice-commands/#common-issues","title":"Common Issues","text":"<p>Command Not Recognized - Check microphone setup - Verify Wingman-AI is active - Try simpler command structure - Check command syntax in this guide</p> <p>Wrong User Identified - Update phonetic name in profile - Use full names in commands - Avoid similar names in squad</p> <p>Permission Denied - Verify your rank level - Check objective access restrictions - Contact administrator for permissions</p> <p>No Response - Check Wingman-AI logs - Verify API connectivity - Restart voice skill - Use web interface fallback</p>"},{"location":"user-manual/voice-commands/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Use wired microphone for better quality</li> <li>Close background applications</li> <li>Update audio drivers</li> <li>Test in quiet environment</li> </ul>"},{"location":"user-manual/voice-commands/#integration-with-game","title":"Integration with Game","text":""},{"location":"user-manual/voice-commands/#in-game-usage","title":"In-Game Usage","text":"<ul> <li>Use PTT (Push-To-Talk) for commands</li> <li>Coordinate with squad voice channels</li> <li>Keep commands brief during combat</li> <li>Use text chat for complex coordination</li> </ul>"},{"location":"user-manual/voice-commands/#cross-platform-coordination","title":"Cross-Platform Coordination","text":"<ul> <li>Web interface for detailed planning</li> <li>Voice commands for real-time updates</li> <li>Mobile access for on-the-go management</li> <li>Discord integration for additional communication</li> </ul>"},{"location":"user-manual/voice-commands/#customization","title":"Customization","text":""},{"location":"user-manual/voice-commands/#personal-commands","title":"Personal Commands","text":"<p>Work with your guild administrator to add custom voice commands for specific workflows.</p>"},{"location":"user-manual/voice-commands/#guild-specific-terminology","title":"Guild-Specific Terminology","text":"<p>Commands can be customized to match your guild's terminology and procedures.</p>"},{"location":"user-manual/voice-commands/#support","title":"Support","text":"<p>For additional help: - Check the troubleshooting guide - Contact your guild administrator - Report issues on GitHub - Join community discussions</p> <p>Remember: Voice commands are designed to enhance, not replace, your coordination strategies. Use them in combination with other communication tools for optimal results.</p>"},{"location":"user-manual/web-interface/","title":"Web Interface Guide","text":"<p>This guide covers the SphereConnect web interface, designed for comprehensive guild management and coordination.</p>"},{"location":"user-manual/web-interface/#interface-overview","title":"Interface Overview","text":"<p>The SphereConnect web interface provides a responsive, Star Citizen-themed dashboard accessible from desktop and mobile devices.</p>"},{"location":"user-manual/web-interface/#main-navigation","title":"Main Navigation","text":""},{"location":"user-manual/web-interface/#top-navigation-bar","title":"Top Navigation Bar","text":"<ul> <li>Dashboard: Overview of active objectives and tasks</li> <li>Objectives: Create and manage mission objectives</li> <li>Tasks: Assign and track individual tasks</li> <li>Squads: Manage team formations</li> <li>Users: Member management (admin only)</li> <li>Settings: Personal and guild configuration</li> </ul>"},{"location":"user-manual/web-interface/#user-menu-top-right","title":"User Menu (Top Right)","text":"<ul> <li>Profile settings</li> <li>Notification preferences</li> <li>Logout option</li> <li>Account status indicator</li> </ul>"},{"location":"user-manual/web-interface/#dashboard","title":"Dashboard","text":""},{"location":"user-manual/web-interface/#overview-widgets","title":"Overview Widgets","text":""},{"location":"user-manual/web-interface/#active-objectives","title":"Active Objectives","text":"<ul> <li>Current mission status</li> <li>Priority indicators</li> <li>Progress bars</li> <li>Assigned squad information</li> </ul>"},{"location":"user-manual/web-interface/#my-tasks","title":"My Tasks","text":"<ul> <li>Personal task assignments</li> <li>Due dates and priorities</li> <li>Quick status updates</li> <li>Completion tracking</li> </ul>"},{"location":"user-manual/web-interface/#squad-status","title":"Squad Status","text":"<ul> <li>Current squad membership</li> <li>Online member count</li> <li>Recent activity feed</li> </ul>"},{"location":"user-manual/web-interface/#system-status","title":"System Status","text":"<ul> <li>API connectivity</li> <li>Voice integration status</li> <li>System health indicators</li> </ul>"},{"location":"user-manual/web-interface/#quick-actions","title":"Quick Actions","text":"<ul> <li>Create new objective (floating action button)</li> <li>Voice command testing</li> <li>Emergency broadcast (admin only)</li> </ul>"},{"location":"user-manual/web-interface/#objectives-management","title":"Objectives Management","text":""},{"location":"user-manual/web-interface/#objectives-list-view","title":"Objectives List View","text":"<ul> <li>Filter by status, priority, category</li> <li>Sort by creation date, priority, progress</li> <li>Search by name or description</li> <li>Bulk actions for admins</li> </ul>"},{"location":"user-manual/web-interface/#objective-details-page","title":"Objective Details Page","text":"<ul> <li>Overview Tab:</li> <li>Brief, tactical, and classified descriptions</li> <li>Progress metrics and completion status</li> <li> <p>Assigned squad and lead</p> </li> <li> <p>Tasks Tab:</p> </li> <li>Sub-tasks list</li> <li>Assignment status</li> <li> <p>Progress tracking</p> </li> <li> <p>Team Tab:</p> </li> <li>Assigned members</li> <li>Role assignments</li> <li> <p>Communication logs</p> </li> <li> <p>History Tab:</p> </li> <li>Status changes</li> <li>Progress updates</li> <li>Member assignments</li> </ul>"},{"location":"user-manual/web-interface/#creating-objectives","title":"Creating Objectives","text":""},{"location":"user-manual/web-interface/#basic-information","title":"Basic Information","text":"<ul> <li>Name: Clear, descriptive title</li> <li>Category: Economy, Military, Exploration, etc.</li> <li>Priority: Critical, High, Medium, Low</li> <li>Lead: Objective commander</li> </ul>"},{"location":"user-manual/web-interface/#descriptions","title":"Descriptions","text":"<ul> <li>Brief: High-level overview (visible to all ranks)</li> <li>Tactical: Detailed execution plan (rank-restricted)</li> <li>Classified: Sensitive information (officer+ only)</li> </ul>"},{"location":"user-manual/web-interface/#settings","title":"Settings","text":"<ul> <li>Applicable Rank: Minimum rank to view</li> <li>Squad Assignment: Pre-assign or allow ad-hoc</li> <li>Deadline: Optional completion target</li> <li>Auto-notifications: Enable push updates</li> </ul>"},{"location":"user-manual/web-interface/#tasks-management","title":"Tasks Management","text":""},{"location":"user-manual/web-interface/#tasks-list-view","title":"Tasks List View","text":"<ul> <li>Filter by objective, assignee, status</li> <li>Due date sorting</li> <li>Priority indicators</li> <li>Quick assignment tools</li> </ul>"},{"location":"user-manual/web-interface/#task-details","title":"Task Details","text":"<ul> <li>Description: Detailed requirements</li> <li>Assignee: Current responsible party</li> <li>Schedule: Start time, duration, flexibility</li> <li>Progress: Completion percentage</li> <li>Dependencies: Related tasks or objectives</li> </ul>"},{"location":"user-manual/web-interface/#task-operations","title":"Task Operations","text":"<ul> <li>Assignment: Assign to users or squads</li> <li>Scheduling: Set flexible or fixed times</li> <li>Progress Updates: Report completion status</li> <li>Comments: Add notes and coordination</li> </ul>"},{"location":"user-manual/web-interface/#squads-management","title":"Squads Management","text":""},{"location":"user-manual/web-interface/#squads-overview","title":"Squads Overview","text":"<ul> <li>Active squads list</li> <li>Member counts and status</li> <li>Current objectives</li> <li>Performance metrics</li> </ul>"},{"location":"user-manual/web-interface/#squad-details","title":"Squad Details","text":"<ul> <li>Members Tab: Current roster</li> <li>Objectives Tab: Active assignments</li> <li>History Tab: Past operations</li> <li>Settings Tab: Squad configuration</li> </ul>"},{"location":"user-manual/web-interface/#squad-creation","title":"Squad Creation","text":"<ul> <li>Name: Unique identifier</li> <li>Lead: Squad commander</li> <li>Specialization: Mining, Combat, Exploration, etc.</li> <li>Auto-assignment: Skill-based preferences</li> </ul>"},{"location":"user-manual/web-interface/#user-management-admin-only","title":"User Management (Admin Only)","text":""},{"location":"user-manual/web-interface/#user-directory","title":"User Directory","text":"<ul> <li>Search and filter members</li> <li>Rank and squad assignments</li> <li>Activity status</li> <li>Last login information</li> </ul>"},{"location":"user-manual/web-interface/#user-profiles","title":"User Profiles","text":"<ul> <li>Basic Info: Name, rank, squad</li> <li>Security: Authentication settings</li> <li>Preferences: Notification and display options</li> <li>Activity: Recent actions and contributions</li> </ul>"},{"location":"user-manual/web-interface/#bulk-operations","title":"Bulk Operations","text":"<ul> <li>Rank promotions/demotions</li> <li>Squad reassignments</li> <li>Account activation/deactivation</li> <li>Bulk notifications</li> </ul>"},{"location":"user-manual/web-interface/#settings-and-configuration","title":"Settings and Configuration","text":""},{"location":"user-manual/web-interface/#personal-settings","title":"Personal Settings","text":"<ul> <li>Profile: Name, phonetic pronunciation, avatar</li> <li>Security: Password, PIN, MFA setup</li> <li>Notifications: Email, push, in-game alerts</li> <li>Preferences: Theme, language, timezone</li> </ul>"},{"location":"user-manual/web-interface/#guild-settings-admin-only","title":"Guild Settings (Admin Only)","text":"<ul> <li>General: Guild name, description, logo</li> <li>Ranks: Hierarchy configuration</li> <li>Access Levels: Permission management</li> <li>AI Commander: Personality customization</li> <li>Integrations: External service connections</li> </ul>"},{"location":"user-manual/web-interface/#mobile-interface","title":"Mobile Interface","text":""},{"location":"user-manual/web-interface/#responsive-design","title":"Responsive Design","text":"<ul> <li>Optimized for tablets and phones</li> <li>Touch-friendly controls</li> <li>Swipe gestures for navigation</li> <li>Collapsible menus for space efficiency</li> </ul>"},{"location":"user-manual/web-interface/#mobile-features","title":"Mobile Features","text":"<ul> <li>Push Notifications: Real-time alerts</li> <li>Voice Integration: Mobile microphone access</li> <li>Offline Mode: Basic functionality without connection</li> <li>Camera Integration: Photo uploads for progress reports</li> </ul>"},{"location":"user-manual/web-interface/#advanced-features","title":"Advanced Features","text":""},{"location":"user-manual/web-interface/#search-and-filtering","title":"Search and Filtering","text":"<ul> <li>Global Search: Find objectives, tasks, users</li> <li>Advanced Filters: Multiple criteria combination</li> <li>Saved Searches: Frequently used filter sets</li> <li>Export Results: CSV/PDF downloads</li> </ul>"},{"location":"user-manual/web-interface/#reporting-and-analytics","title":"Reporting and Analytics","text":"<ul> <li>Objective Completion Rates: Success metrics</li> <li>Member Activity: Contribution tracking</li> <li>Squad Performance: Effectiveness analysis</li> <li>Time Tracking: Hours logged per objective</li> </ul>"},{"location":"user-manual/web-interface/#integration-status","title":"Integration Status","text":"<ul> <li>Wingman-AI: Voice command connectivity</li> <li>External APIs: Game data synchronization</li> <li>Notification Services: Push/email delivery</li> <li>Backup Systems: Data integrity monitoring</li> </ul>"},{"location":"user-manual/web-interface/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":""},{"location":"user-manual/web-interface/#global-shortcuts","title":"Global Shortcuts","text":"<ul> <li><code>Ctrl/Cmd + K</code>: Global search</li> <li><code>Ctrl/Cmd + N</code>: New objective</li> <li><code>Ctrl/Cmd + T</code>: New task</li> <li><code>Ctrl/Cmd + /</code>: Help overlay</li> </ul>"},{"location":"user-manual/web-interface/#navigation","title":"Navigation","text":"<ul> <li><code>1-5</code>: Switch main tabs</li> <li><code>Arrow Keys</code>: Navigate lists</li> <li><code>Enter</code>: Open selected item</li> <li><code>Escape</code>: Close modals</li> </ul>"},{"location":"user-manual/web-interface/#accessibility-features","title":"Accessibility Features","text":""},{"location":"user-manual/web-interface/#screen-reader-support","title":"Screen Reader Support","text":"<ul> <li>ARIA labels and descriptions</li> <li>Semantic HTML structure</li> <li>Keyboard navigation support</li> <li>High contrast mode</li> </ul>"},{"location":"user-manual/web-interface/#visual-accommodations","title":"Visual Accommodations","text":"<ul> <li>Adjustable font sizes</li> <li>Color scheme options</li> <li>Reduced motion settings</li> <li>Focus indicators</li> </ul>"},{"location":"user-manual/web-interface/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-manual/web-interface/#loading-strategies","title":"Loading Strategies","text":"<ul> <li>Lazy loading for large lists</li> <li>Progressive image loading</li> <li>Caching for frequently accessed data</li> <li>Background sync for offline capabilities</li> </ul>"},{"location":"user-manual/web-interface/#data-management","title":"Data Management","text":"<ul> <li>Real-time updates via WebSocket</li> <li>Optimistic UI updates</li> <li>Conflict resolution for concurrent edits</li> <li>Automatic retry for failed operations</li> </ul>"},{"location":"user-manual/web-interface/#security-features","title":"Security Features","text":""},{"location":"user-manual/web-interface/#authentication","title":"Authentication","text":"<ul> <li>JWT token management</li> <li>Automatic session refresh</li> <li>Secure logout procedures</li> <li>Multi-factor authentication</li> </ul>"},{"location":"user-manual/web-interface/#data-protection","title":"Data Protection","text":"<ul> <li>End-to-end encryption for sensitive data</li> <li>Input sanitization and validation</li> <li>XSS protection</li> <li>CSRF prevention</li> </ul>"},{"location":"user-manual/web-interface/#troubleshooting-interface-issues","title":"Troubleshooting Interface Issues","text":""},{"location":"user-manual/web-interface/#common-problems","title":"Common Problems","text":"<p>Page Not Loading - Check internet connection - Clear browser cache - Disable browser extensions - Try different browser</p> <p>Features Not Working - Verify user permissions - Check JavaScript console for errors - Ensure latest browser version - Contact support with error details</p> <p>Mobile Issues - Update mobile browser - Check app permissions - Clear app data/cache - Verify responsive design</p> <p>Performance Problems - Close unnecessary tabs - Check system resources - Clear browser data - Use incognito mode for testing</p>"},{"location":"user-manual/web-interface/#browser-compatibility","title":"Browser Compatibility","text":"<ul> <li>Chrome/Edge: Full support</li> <li>Firefox: Full support</li> <li>Safari: Full support (latest versions)</li> <li>Mobile Browsers: iOS Safari, Chrome Mobile</li> </ul>"},{"location":"user-manual/web-interface/#getting-help","title":"Getting Help","text":""},{"location":"user-manual/web-interface/#interface-help","title":"Interface Help","text":"<ul> <li>Tooltips: Hover over icons for explanations</li> <li>Context Help: <code>?</code> buttons provide guidance</li> <li>Tutorials: Interactive walkthroughs</li> <li>Documentation: Link to this guide</li> </ul>"},{"location":"user-manual/web-interface/#support-resources","title":"Support Resources","text":"<ul> <li>User Forums: Community discussions</li> <li>Video Tutorials: Visual guides</li> <li>Live Chat: Real-time assistance</li> <li>Issue Tracker: Bug reports and feature requests</li> </ul> <p>The web interface is designed to complement voice commands, providing a comprehensive management platform for guild coordination. Use both interfaces together for optimal workflow efficiency.</p>"},{"location":"coverage/","title":"Coverage","text":""}]}