@/docs/project/grok/mvp_grok.markdown @/docs/project/grok/use_cases.markdown @/docs/project/grok/project_context.markdown @/docs/project/grok/kilocode_output.markdown

Fix Join Guild CTA 402 ("Invalid invite code") in SphereConnect MVP. Reimplement CORS, update middleware for path parsing, ensure join endpoint validates invite_code correctly, prevent UI uppercase.

1. Main App (app/main.py):
   - Import: from fastapi.middleware.cors import CORSMiddleware
   - After app = FastAPI():
     app.add_middleware(
         CORSMiddleware,
         allow_origins=["http://localhost:3000", "http://localhost"],
         allow_credentials=True,
         allow_methods=["GET", "POST", "OPTIONS"],
         allow_headers=["Authorization", "Content-Type"],
     )
   - Log: logging.info("CORS middleware added")

2. Middleware Fix (app/api/middleware.py):
   - In _check_limits for POST /api/users/{id}/join:
     - Get body = await request.json()
     - invite_code = body.get('invite_code')
     - If not invite_code: return "Invalid invite code"
     - Lookup invite = db.query(Invite).filter(func.lower(Invite.code) == invite_code.lower()).first()
     - If not invite or invite.uses_left <= 0 or invite.expires_at < datetime.utcnow(): return "Invalid invite code"
     - guild_id = invite.guild_id
     - Query approved_count = db.query(GuildRequest).filter(GuildRequest.guild_id == guild_id, GuildRequest.status == "approved").count()
     - Query user_guilds = db.query(GuildRequest).filter(GuildRequest.user_id == user.id, GuildRequest.status == "approved").count()
     - guild = db.query(Guild).filter(Guild.id == guild_id).first()
     - If approved_count >= (guild.member_limit or 2): return f"Guild at member limit ({approved_count}/{(guild.member_limit or 2)}). Upgrade plan."
     - If user_guilds >= (user.max_guilds or 3): return f"User at guild limit ({user_guilds}/{(user.max_guilds or 3)})."
     - Log: logging.debug(f"Middleware: Join, user_id={user.id}, guild_id={guild_id}, invite_code={invite_code}, approved_count={approved_count}, user_guilds={user_guilds}")

3. Join Guild (app/api/routes.py):
   - In join_guild (POST /api/users/{id}/join):
     - Get body = await request.json()
     - invite_code = body.get('invite_code')
     - If not invite_code: raise HTTPException(status_code=400, detail="Invite code required")
     - Lookup invite = db.query(Invite).filter(func.lower(Invite.code) == invite_code.lower()).first()
     - If not invite or invite.uses_left <= 0 or invite.expires_at < datetime.utcnow(): raise HTTPException(status_code=400, detail="Invalid or expired invite")
     - Create pending GuildRequest with user_id=user_id, guild_id=invite.guild_id
     - Decrement invite.uses_left
     - db.commit()
     - Return {"message": "Join request submitted (pending approval)"}

4. Frontend (frontend/src/pages/AdminDashboard.tsx):
   - In handleJoinSubmit: Use inviteCode.trim(), ensure lowercase if needed (but backend handles case-insensitive).
   - Handle 402: setJoinMessage(response.data.detail || "Guild member limit reached.")
   - If 200, reload guilds.

5. Tests (tests/guild_tests.py):
   - TestJoinInvalidInvite: POST with invalid invite_code â†’ 400.
   - TestJoinLimit402: 200 on non-full, 402 on full.
   - TestJoinCORS: OPTIONS /api/users/{id}/join returns 200 with CORS headers.

No schema changes; align with v24 spec (member_limit=2, max_guilds=3).

Generate: Updated files (app/main.py, app/api/middleware.py, app/api/routes.py, frontend/src/pages/AdminDashboard.tsx), test stubs.