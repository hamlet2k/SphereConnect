Prompt for Kilo Code (grok-code-fast-1):

Refine RBAC model in SphereConnect MVP to restrict access level/user action management to guild "system admins". Align with FastAPI backend, React frontend, v21 spec (User persona, guild-only monetization). Introduce `manage_rbac` permission, auto-assigned to CO rank in registration. Update access level endpoints to require `manage_rbac` instead of `view_access_levels`. Ensure ranks.access_levels is UUID[]. Add confirmation dialogs for access level changes. Do not modify node_modules.

1. **Backend Refinements**:
   - Path: app/api/routes.py
   - Update /api/auth/register:
     - Add `manage_rbac` to default access_levels:
       ```python
       access_view = AccessLevel(name='view_guilds', user_actions=['view_guilds'])
       access_manage = AccessLevel(name='manage_guilds', user_actions=['manage_guilds', 'manage_users'])
       access_objectives = AccessLevel(name='objectives', user_actions=['create_objective', 'manage_objectives'])
       access_rbac = AccessLevel(name='manage_rbac', user_actions=['manage_rbac'])
       db.add_all([access_view, access_manage, access_objectives, access_rbac])
       db.commit()
       rank_co = Rank(name='CO', access_levels=[access_view.id, access_manage.id, access_objectives.id, access_rbac.id])
       ```
   - Path: app/api/admin_routes.py
   - Update access level endpoints to require `manage_rbac`:
     - GET /api/admin/access-levels?guild_id={guild_id}
     - POST /api/admin/access-levels {name, user_actions}
     - PATCH /api/admin/access-levels/{id}
     - DELETE /api/admin/access-levels/{id}
   - Update app/api/middleware.py: Add `manage_rbac` checks for RBAC middleware.

2. **Schema Verification**:
   - Path: db/schema/ranks.sql
   - Ensure `access_levels` is UUID[]:
     ```sql
     CREATE TABLE ranks (
         id UUID PRIMARY KEY,
         guild_id UUID NOT NULL,
         name TEXT NOT NULL,
         access_levels UUID[] NOT NULL,
         phonetic TEXT,
         FOREIGN KEY (guild_id) REFERENCES guilds(id)
     );
     ```
   - Update db/schema/master_schema.sql.

3. **Frontend Updates**:
   - Path: frontend/src/components/AccessLevelManager.tsx
   - Add confirmation dialogs for create/edit/delete (e.g., "Are you sure? This changes permissions.").
   - Add error handling for 403 ("Insufficient permissions to manage access levels").
   - Path: frontend/src/pages/AdminDashboard.tsx
   - Refresh Access Levels tab after permission fix.

4. **Stubs**:
   - tests/guild_tests.py: TestRbacPermission (test `manage_rbac` access).
   - frontend/src/tests/access/AccessLevelManager.test.tsx: Add test for 403 handling and confirmation dialogs.

Implementation Details:
- FastAPI, SQLAlchemy, Chakra UI, TypeScript.
- Proxy: http://localhost:8000.
- Reference: @/docs/project/mvp_grok.markdown, @/docs/project/use_cases.markdown, @/docs/project/kilocode_output.markdown.
- No node_modules edits.

Output artifacts:
- app/api/admin_routes.py
- app/api/routes.py
- app/api/middleware.py
- db/schema/ranks.sql
- db/schema/master_schema.sql
- frontend/src/components/AccessLevelManager.tsx
- frontend/src/pages/AdminDashboard.tsx
- frontend/src/tests/access/AccessLevelManager.test.tsx
- tests/guild_tests.py
- scripts/test_data.py